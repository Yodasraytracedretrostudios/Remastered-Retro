//Water PS purgatory.
// ---- Created with 3Dmigoto v1.3.16 on Wed Feb 03 23:56:39 2021
Texture2D<float4> t13 : register(t13);

Texture2D<float4> t10 : register(t10);

Texture2D<float4> t9 : register(t9);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s13_s : register(s13);

SamplerState s10_s : register(s10);

SamplerState s9_s : register(s9);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb11 : register(b11)
{
  float4 cb11[1];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[1];
}

cbuffer cb2 : register(b2)
{
  float4 cb2[16];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[13];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[26];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : COLOR0,
  float4 v1 : COLOR1,
  float4 v2 : TEXCOORD0,
  float4 v3 : TEXCOORD1,
  float4 v4 : TEXCOORD2,
  float4 v5 : TEXCOORD3,
  float4 v6 : TEXCOORD4,
  float4 v7 : TEXCOORD5,
  float4 v8 : TEXCOORD6,
  float4 v9 : TEXCOORD7,
  float4 v10 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  v6.x+=stereo.x*(v6.w-stereo.y)*0.5;
  
  r0.xy = t0.Sample(s0_s, v2.xy).xw;
  r0.zw = t1.Sample(s1_s, v2.zw).xw;
  r0.w = v1.x * r0.w;
  r0.z = r0.z + -r0.x;
  r0.x = r0.w * r0.z + r0.x;
  r1.xz = cb5[0].xz;
  r1.yw = float2(0,0);
  r2.xy = v2.xy + r1.xw;
  r0.z = t0.Sample(s0_s, r2.xy).x;
  r2.xw = cb5[0].zw;
  r2.yz = float2(0,0);
  r2.xyzw = v2.zwzw + r2.xyzw;
  r2.x = t1.Sample(s1_s, r2.xy).x;
  r2.x = r2.x + -r0.z;
  r0.z = r0.w * r2.x + r0.z;
  r0.z = r0.z * 2 + -1;
  r1.xyzw = v2.xyzw + -r1.xyzw;
  r1.x = t0.Sample(s0_s, r1.xy).x;
  r1.y = t1.Sample(s1_s, r1.zw).x;
  r1.y = r1.y + -r1.x;
  r1.x = r0.w * r1.y + r1.x;
  r1.x = r1.x * 2 + -1;
  r3.xz = float2(0,0);
  r3.yw = cb5[0].yw;
  r1.yz = v2.xy + r3.zy;
  r1.y = t0.Sample(s0_s, r1.yz).x;
  r1.z = t1.Sample(s1_s, r2.zw).x;
  r1.z = r1.z + -r1.y;
  r1.y = r0.w * r1.z + r1.y;
  r1.y = r1.y * 2 + -1;
  r2.xyzw = v2.xyzw + -r3.xyzw;
  r1.z = t0.Sample(s0_s, r2.xy).x;
  r1.w = t1.Sample(s1_s, r2.zw).x;
  r1.w = r1.w + -r1.z;
  r0.w = r0.w * r1.w + r1.z;
  r0.w = r0.w * 2 + -1;
  r0.z = -r1.x + r0.z;
  r0.w = r1.y + -r0.w;
  r1.x = -r0.z * r0.z + 1;
  r1.y = -r0.w * r0.w + 1;
  r1.xy = sqrt(r1.xy);
  r2.xy = r1.yx * -r0.zw;
  r2.z = r1.x * r1.y;
  r0.z = dot(v3.xyz, v3.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = v3.xyz * r0.zzz;
  r0.z = dot(v4.xyz, v4.xyz);
  r0.z = rsqrt(r0.z);
  r3.xyz = v4.yzx * r0.zzz;
  r4.xyz = r3.xyz * r1.zxy;
  r4.xyz = r1.yzx * r3.yzx + -r4.xyz;
  r4.xyz = v4.www * r4.xyz;
  r5.x = r3.z;
  r5.y = r4.x;
  r5.z = r1.x;
  r5.x = dot(r5.xyz, r2.xyz);
  r6.x = r3.x;
  r6.y = r4.y;
  r6.z = r1.y;
  r5.y = dot(r6.xyz, r2.xyz);
  r1.x = r3.y;
  r1.y = r4.z;
  r5.z = dot(r1.xyz, r2.xyz);
  r0.z = dot(r5.xyz, r5.xyz);
  r0.z = rsqrt(r0.z);
  r1.xyz = r5.xyz * r0.zzz;
  r0.z = dot(v5.xyz, v5.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = v5.xyz * r0.zzz;
  r0.w = saturate(dot(-r2.xyz, r1.xyz));
  r0.w = 1 + -r0.w;
  r0.w = r0.w * r0.w;
  r0.w = r0.w * r0.w;
  r0.w = v1.y * r0.w;
  r1.w = 1 + -v3.w;
  r0.w = r0.w * r1.w + v3.w;
  r2.xyz = v5.xyz * r0.zzz + cb1[12].xyz;
  
  //r2.x+=stereo.x*stereo.y*cb13[16].x*-8*(1-v10.z)/(cb13[12].x);
  //r2.y+=stereo.x*stereo.y*cb13[16].y*-8*(1-v10.z)/(cb13[12].x);
  //r2.z+=stereo.x*stereo.y*cb13[16].z*-8*(1-v10.z)/(cb13[12].x);
  
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r0.z = 1 + -r0.w;
  r3.xyz = int3(8,1,4) & asint(cb11[0].yyy);
  if (r3.x != 0) {
    r4.xy = v6.xy / v6.ww;
    r4.xy = t13.Sample(s13_s, r4.xy).xy;
  } else {
    r4.xy = float2(1,1);
  }
  r4.zw = r4.xy * cb2[11].xz + cb2[11].yw;
  r4.xy = r3.xx ? r4.zw : r4.xy;
  r1.w = r4.x * r4.y;
  r4.xyz = v0.xyz * r1.www;
  r5.xyz = r3.yyy ? v9.xyz : float3(0,0,0);
  r6.x = v9.w;
  r6.y = v7.w;
  r6.z = v8.w;
  r6.xyz = r3.yyy ? r6.xyz : float3(0,0,0);
  r2.w = dot(r1.xyz, -cb1[12].xyz);
  r7.xyz = cb1[4].xyz * r1.www;
  r1.w = saturate(r2.w);
  r2.w = saturate(-r2.w);
  r8.xyz = cb1[5].xyz * r2.www;
  r7.xyz = r7.xyz * r1.www + r8.xyz;
  r7.xyz = r7.xyz * cb1[0].xyz + cb1[2].xyz;
  r5.xyz = r7.xyz + r5.xyz;
  r5.xyz = v0.xyz * r5.xyz;
  r1.y = saturate(dot(-r2.xyz, r1.xyz));
  r1.y = log2(r1.y);
  r1.y = cb1[1].w * r1.y;
  r1.y = exp2(r1.y);
  r2.xyz = cb1[1].xyz * r1.yyy;
  r2.xyz = r2.xyz * cb1[4].xyz + r6.xyz;
  r2.xyz = r2.xyz * r4.xyz;
  r2.xyz = r2.xyz * r0.xxx;
  r2.xyz = r5.xyz * r0.zzz + r2.xyz;
  r0.xz = -r1.xz * float2(0.0399999991,0.0399999991) + v6.xy;
  r1.xy = r0.xz / v6.ww;
  r4.xyz = t10.Sample(s10_s, r1.xy).xyz;
  r2.xyz = r4.xyz * r0.www + r2.xyz;
  r0.y = v0.w * r0.y;
  r0.y = r0.y * cb1[0].w + r0.w;
  r0.w = saturate(-v6.w * 0.015625 + 1);
  r0.w = r0.w * r0.w;
  r1.x = t13.Sample(s13_s, r1.xy).z;
  r0.w = cmp(r0.w < r1.x);
  r0.xz = r0.ww ? v6.xy : r0.xz;
  r0.xz = r0.xz / v6.ww;
  r0.xzw = t9.Sample(s9_s, r0.xz).xyz;
  r1.xyz = r2.xyz + -r0.xzw;
  r0.xyz = r0.yyy * r1.xyz + r0.xzw;
  r1.xyz = saturate(v8.xyz);
  r1.yzw = r0.xyz * v7.xyz + r1.xyz;
  r2.xyz = cb2[15].xyz + -r0.xyz;
  r0.xyz = r1.xxx * r2.xyz + r0.xyz;
  r0.xyz = r3.zzz ? r1.yzw : r0.xyz;
  r1.x = cmp(0 < asuint(cb11[0].z));
  r1.y = asuint(cb11[0].z);
  r1.y = -r1.y * 0.00392156886 + 1;
  r1.y = cmp(r1.y < 0);
  r1.x = r1.x ? r1.y : 0;
  if (r1.x != 0) discard;
  r0.w = 1;
  r1.xyzw = cb2[14].xyzw * r0.xyzw;
  o0.xyzw = r3.xxxx ? r0.xyzw : r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Feb 03 23:56:39 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// COLOR                    1   xyzw        1     NONE   float   xy
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyzw        3     NONE   float   xyzw
// TEXCOORD                 2   xyzw        4     NONE   float   xyzw
// TEXCOORD                 3   xyzw        5     NONE   float   xyz
// TEXCOORD                 4   xyzw        6     NONE   float   xy w
// TEXCOORD                 5   xyzw        7     NONE   float   xyzw
// TEXCOORD                 6   xyzw        8     NONE   float   xyzw
// TEXCOORD                 7   xyzw        9     NONE   float   xyzw
// SV_POSITION              0   xyzw       10      POS   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb1[13], immediateIndexed
dcl_constantbuffer cb2[16], immediateIndexed
dcl_constantbuffer cb5[1], immediateIndexed
dcl_constantbuffer cb11[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s9, mode_default
dcl_sampler s10, mode_default
dcl_sampler s13, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t9
dcl_resource_texture2d (float,float,float,float) t10
dcl_resource_texture2d (float,float,float,float) t13
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyw
dcl_input_ps linear v7.xyzw
dcl_input_ps linear v8.xyzw
dcl_input_ps linear v9.xyzw
dcl_output o0.xyzw
dcl_temps 9
sample_indexable(texture2d)(float,float,float,float) r0.xy, v2.xyxx, t0.xwyz, s0
sample_indexable(texture2d)(float,float,float,float) r0.zw, v2.zwzz, t1.yzxw, s1
mul r0.w, r0.w, v1.x
add r0.z, -r0.x, r0.z
mad r0.x, r0.w, r0.z, r0.x
mov r1.xz, cb5[0].xxzx
mov r1.yw, l(0,0,0,0)
add r2.xy, r1.xwxx, v2.xyxx
sample_indexable(texture2d)(float,float,float,float) r0.z, r2.xyxx, t0.yzxw, s0
mov r2.xw, cb5[0].zzzw
mov r2.yz, l(0,0,0,0)
add r2.xyzw, r2.xyzw, v2.zwzw
sample_indexable(texture2d)(float,float,float,float) r2.x, r2.xyxx, t1.xyzw, s1
add r2.x, -r0.z, r2.x
mad r0.z, r0.w, r2.x, r0.z
mad r0.z, r0.z, l(2.000000), l(-1.000000)
add r1.xyzw, -r1.xyzw, v2.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.y, r1.zwzz, t1.yxzw, s1
add r1.y, -r1.x, r1.y
mad r1.x, r0.w, r1.y, r1.x
mad r1.x, r1.x, l(2.000000), l(-1.000000)
mov r3.xz, l(0,0,0,0)
mov r3.yw, cb5[0].yyyw
add r1.yz, r3.zzyz, v2.xxyx
sample_indexable(texture2d)(float,float,float,float) r1.y, r1.yzyy, t0.yxzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.z, r2.zwzz, t1.yzxw, s1
add r1.z, -r1.y, r1.z
mad r1.y, r0.w, r1.z, r1.y
mad r1.y, r1.y, l(2.000000), l(-1.000000)
add r2.xyzw, -r3.xyzw, v2.xyzw
sample_indexable(texture2d)(float,float,float,float) r1.z, r2.xyxx, t0.yzxw, s0
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.zwzz, t1.yzwx, s1
add r1.w, -r1.z, r1.w
mad r0.w, r0.w, r1.w, r1.z
mad r0.w, r0.w, l(2.000000), l(-1.000000)
add r0.z, r0.z, -r1.x
add r0.w, -r0.w, r1.y
mad r1.x, -r0.z, r0.z, l(1.000000)
mad r1.y, -r0.w, r0.w, l(1.000000)
sqrt r1.xy, r1.xyxx
mul r2.xy, -r0.zwzz, r1.yxyy
mul r2.z, r1.y, r1.x
dp3 r0.z, v3.xyzx, v3.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, v3.xyzx
dp3 r0.z, v4.xyzx, v4.xyzx
rsq r0.z, r0.z
mul r3.xyz, r0.zzzz, v4.yzxy
mul r4.xyz, r1.zxyz, r3.xyzx
mad r4.xyz, r1.yzxy, r3.yzxy, -r4.xyzx
mul r4.xyz, r4.xyzx, v4.wwww
mov r5.x, r3.z
mov r5.y, r4.x
mov r5.z, r1.x
dp3 r5.x, r5.xyzx, r2.xyzx
mov r6.x, r3.x
mov r6.y, r4.y
mov r6.z, r1.y
dp3 r5.y, r6.xyzx, r2.xyzx
mov r1.x, r3.y
mov r1.y, r4.z
dp3 r5.z, r1.xyzx, r2.xyzx
dp3 r0.z, r5.xyzx, r5.xyzx
rsq r0.z, r0.z
mul r1.xyz, r0.zzzz, r5.xyzx
dp3 r0.z, v5.xyzx, v5.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, v5.xyzx
dp3_sat r0.w, -r2.xyzx, r1.xyzx
add r0.w, -r0.w, l(1.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, v1.y
add r1.w, -v3.w, l(1.000000)
mad r0.w, r0.w, r1.w, v3.w
mad r2.xyz, v5.xyzx, r0.zzzz, cb1[12].xyzx
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
add r0.z, -r0.w, l(1.000000)
and r3.xyz, l(8, 1, 4, 0), cb11[0].yyyy
if_nz r3.x
  div r4.xy, v6.xyxx, v6.wwww
  sample_indexable(texture2d)(float,float,float,float) r4.xy, r4.xyxx, t13.xyzw, s13
else
  mov r4.xy, l(1.000000,1.000000,0,0)
endif
mad r4.zw, r4.xxxy, cb2[11].xxxz, cb2[11].yyyw
movc r4.xy, r3.xxxx, r4.zwzz, r4.xyxx
mul r1.w, r4.y, r4.x
mul r4.xyz, r1.wwww, v0.xyzx
movc r5.xyz, r3.yyyy, v9.xyzx, l(0,0,0,0)
mov r6.x, v9.w
mov r6.y, v7.w
mov r6.z, v8.w
movc r6.xyz, r3.yyyy, r6.xyzx, l(0,0,0,0)
dp3 r2.w, r1.xyzx, -cb1[12].xyzx
mul r7.xyz, r1.wwww, cb1[4].xyzx
mov_sat r1.w, r2.w
mov_sat r2.w, -r2.w
mul r8.xyz, r2.wwww, cb1[5].xyzx
mad r7.xyz, r7.xyzx, r1.wwww, r8.xyzx
mad r7.xyz, r7.xyzx, cb1[0].xyzx, cb1[2].xyzx
add r5.xyz, r5.xyzx, r7.xyzx
mul r5.xyz, r5.xyzx, v0.xyzx
dp3_sat r1.y, -r2.xyzx, r1.xyzx
log r1.y, r1.y
mul r1.y, r1.y, cb1[1].w
exp r1.y, r1.y
mul r2.xyz, r1.yyyy, cb1[1].xyzx
mad r2.xyz, r2.xyzx, cb1[4].xyzx, r6.xyzx
mul r2.xyz, r4.xyzx, r2.xyzx
mul r2.xyz, r0.xxxx, r2.xyzx
mad r2.xyz, r5.xyzx, r0.zzzz, r2.xyzx
mad r0.xz, -r1.xxzx, l(0.040000, 0.000000, 0.040000, 0.000000), v6.xxyx
div r1.xy, r0.xzxx, v6.wwww
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r1.xyxx, t10.xyzw, s10
mad r2.xyz, r4.xyzx, r0.wwww, r2.xyzx
mul r0.y, r0.y, v0.w
mad r0.y, r0.y, cb1[0].w, r0.w
mad_sat r0.w, -v6.w, l(0.015625), l(1.000000)
mul r0.w, r0.w, r0.w
sample_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t13.zxyw, s13
lt r0.w, r0.w, r1.x
movc r0.xz, r0.wwww, v6.xxyx, r0.xxzx
div r0.xz, r0.xxzx, v6.wwww
sample_indexable(texture2d)(float,float,float,float) r0.xzw, r0.xzxx, t9.xwyz, s9
add r1.xyz, -r0.xzwx, r2.xyzx
mad r0.xyz, r0.yyyy, r1.xyzx, r0.xzwx
mov_sat r1.xyz, v8.xyzx
mad r1.yzw, r0.xxyz, v7.xxyz, r1.xxyz
add r2.xyz, -r0.xyzx, cb2[15].xyzx
mad r0.xyz, r1.xxxx, r2.xyzx, r0.xyzx
movc r0.xyz, r3.zzzz, r1.yzwy, r0.xyzx
ult r1.x, l(0), cb11[0].z
utof r1.y, cb11[0].z
mad r1.y, -r1.y, l(0.00392156886), l(1.000000)
lt r1.y, r1.y, l(0.000000)
and r1.x, r1.x, r1.y
discard_nz r1.x
mov r0.w, l(1.000000)
mul r1.xyzw, r0.xyzw, cb2[14].xyzw
movc o0.xyzw, r3.xxxx, r0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
