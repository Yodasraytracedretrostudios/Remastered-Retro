//Drink in glass haloing, and specular.
// ---- Created with 3Dmigoto v1.3.16 on Sun Jan 31 11:23:04 2021
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb11 : register(b11)
{
  float4 cb11[1];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[10];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[26];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r15,r16;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  float4 iniparams3 = IniParams.Load(int2(3,0));
  
  r15=v2;
  r16=v3;
  r16.x+=stereo.x*(v2.z-stereo.y)*0.5;
  
  if (iniparams3.w==6) {
	r15.x+=stereo.x*(v2.z-stereo.y)*0.5;
  }
  
  r0.xy = r15.xy / v2.zz;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r1.x = -0.00196078443 + r0.w;
  r1.x = cmp(r1.x < 0);
  if (r1.x != 0) discard;
  r1.xyzw = t2.Sample(s2_s, v3.zw).xyzw;
  r2.xy = r16.xy / v2.zz;
  r2.z = 1 + -r1.w;
  r2.w = dot(cb5[2].xyz, -v4.xyz);
  r2.w = cb5[2].w * r2.w + cb5[0].w;
  r3.x = t3.Sample(s3_s, v1.zw).w;
  r2.w = r2.w * r3.x + v1.y;
  r0.x = -cb5[3].x + r0.x;
  r0.y = -cb5[0].x + r0.y;
  r3.x = cb5[0].z * r0.y;
  r3.y = cmp(0 < r2.w);
  r3.zw = v5.xy * float2(1,-1) + r2.xy;
  r4.xyz = t1.Sample(s1_s, r3.zw).xyz;
  
  //v6.xyz-=stereo.x*stereo.y*cb5[5].xyz/cb13[12].x;
  
  r3.z = dot(v6.xyz, v6.xyz);
  r3.z = rsqrt(r3.z);
  r5.xyz = v6.xyz * r3.zzz;
  r3.z = dot(cb5[1].xyz, r5.xyz);
  r3.z = -cb5[1].w / r3.z;
  r6.xyz = r5.xyz * r3.zzz;
  r6.w = 1;
  r7.x = dot(cb5[4].xyzw, r6.xyzw);
  r7.y = dot(cb5[5].xyzw, r6.xyzw);
  r3.zw = t3.Sample(s3_s, r7.xy).xy;
  r3.zw = float2(-0.5,-0.5) + r3.zw;
  r6.xy = r3.zw * cb5[7].ww + cb5[1].xy;
  r6.z = cb5[1].z;
  r3.z = dot(r6.xyz, r6.xyz);
  r3.z = rsqrt(r3.z);
  r7.xyz = r6.xyz * r3.zzz;
  r3.z = dot(r7.xyz, r5.xyz);
  r3.w = cb5[7].y * -r7.z;
  r7.zw = r3.ww * r7.xy;
  r7.zw = r7.zw * float2(1,-1) + r2.xy;
  r8.xyz = t1.Sample(s1_s, r7.zw).xyz;
  r3.w = -2 * r3.z;
  r7.xy = r3.ww * r7.xy + r5.xy;
  r7.xy = r7.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r7.xyz = t1.Sample(s1_s, r7.xy).xyz;
  r0.x = r0.x * cb5[3].z + -v1.x;
  r3.w = r3.x * r0.x;
  r4.w = r0.y * cb5[0].z + -r2.w;
  r3.w = r3.w / r4.w;
  r9.xy = r0.zw * float2(2,2.00866485) + float2(-1,-1.00866485);
  r0.z = dot(r9.xy, r9.xy);
  r0.z = 1 + -r0.z;
  r9.z = sqrt(r0.z);
  r0.z = cb5[7].y * -r9.z;
  r0.zw = r0.zz * r9.xy;
  r0.zw = r0.zw * float2(1,-1) + r2.xy;
  r10.xyz = t1.Sample(s1_s, r0.zw).xyz;
  r0.z = saturate(12 * r3.w);
  r0.z = 1 + -r0.z;
  r6.xyz = r9.xyz * r0.zzz + r6.xyz;
  r0.z = dot(r6.xyz, r6.xyz);
  r0.z = rsqrt(r0.z);
  r6.xyz = r6.xyz * r0.zzz;
  r0.z = dot(r6.xyz, r5.xyz);
  r0.w = -2 * r0.z;
  r2.xy = r0.ww * r6.xy + r5.xy;
  r2.xy = r2.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r5.xyz = t1.Sample(s1_s, r2.xy).xyz;
  if (r3.y != 0) {
    r0.w = cmp(0 < r3.x);
    if (r0.w != 0) {
      r0.w = 100 * r0.x;
      r6.xyz = log2(cb5[6].xyz);
      r6.xyz = r6.xyz * r0.www;
      r6.xyz = exp2(r6.xyz);
      r4.xyz = r6.xyz * r4.xyz;
    } else {
      r0.x = r2.w * r0.x;
      r0.w = -r0.y * cb5[0].z + r2.w;
      r0.x = r0.x / r0.w;
      r0.w = cmp(cb5[7].z < -r3.z);
      if (r0.w == 0) {
        r8.xyz = float3(0,0,0);
      }
      r2.xyw = cb5[9].xyz * r7.xyz;
      r0.w = 1 + r3.z;
      r0.w = log2(abs(r0.w));
      r0.w = cb5[9].w * r0.w;
      r0.w = exp2(r0.w);
      r2.xyw = r2.xyw * r0.www + r8.xyz;
      r0.x = 100 * r0.x;
      r3.xyz = log2(cb5[6].xyz);
      r3.xyz = r3.xyz * r0.xxx;
      r3.xyz = exp2(r3.xyz);
      r4.xyz = r3.xyz * r2.xyw;
    }
    r2.xyw = float3(0,0,0);
  } else {
    r0.x = r0.y * cb5[0].z + -0.00196078443;
    r0.x = cmp(r0.x < 0);
    if (r0.x != 0) {
      if (-1 != 0) discard;
      r4.xyz = float3(0,0,0);
      r2.xyw = float3(0,0,0);
    } else {
      r0.x = 100 * r3.w;
      r3.xyz = log2(cb5[6].xyz);
      r0.xyw = r3.xyz * r0.xxx;
      r0.xyw = exp2(r0.xyw);
      r4.xyz = r10.xyz * r0.xyw;
      r0.xyw = cb5[9].xyz * r5.xyz;
      r0.z = 1 + -r0.z;
      r0.z = log2(abs(r0.z));
      r0.z = cb5[9].w * r0.z;
      r0.z = exp2(r0.z);
      r2.xyw = r0.xyw * r0.zzz;
    }
  }
  r0.xyz = r4.xyz * cb5[6].www + r2.xyw;
  r0.w = 1 + -v4.z;
  r0.w = r1.w * abs(r0.w);
  o0.xyz = r1.xyz * r0.www + r0.xyz;
  r0.x = cmp(0 < asuint(cb11[0].z));
  r0.y = asuint(cb11[0].z);
  r0.y = -r0.y * 0.00392156886 + r2.z;
  r0.y = cmp(r0.y < 0);
  r0.x = r0.x ? r0.y : 0;
  if (r0.x != 0) discard;
  o0.w = r2.z;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sun Jan 31 11:23:04 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xy          5     NONE   float   xy
// TEXCOORD                 5   xyz         6     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[10], immediateIndexed
dcl_constantbuffer cb11[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyzw
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 11
div r0.xy, v2.xyxx, v2.zzzz
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0
add r1.x, r0.w, l(-0.00196078443)
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v3.zwzz, t2.xyzw, s2
div r2.xy, v3.xyxx, v2.zzzz
add r2.z, -r1.w, l(1.000000)
dp3 r2.w, cb5[2].xyzx, -v4.xyzx
mad r2.w, cb5[2].w, r2.w, cb5[0].w
sample_indexable(texture2d)(float,float,float,float) r3.x, v1.zwzz, t3.wxyz, s3
mad r2.w, r2.w, r3.x, v1.y
add r0.x, r0.x, -cb5[3].x
add r0.y, r0.y, -cb5[0].x
mul r3.x, r0.y, cb5[0].z
lt r3.y, l(0.000000), r2.w
mad r3.zw, v5.xxxy, l(0.000000, 0.000000, 1.000000, -1.000000), r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r3.zwzz, t1.xyzw, s1
dp3 r3.z, v6.xyzx, v6.xyzx
rsq r3.z, r3.z
mul r5.xyz, r3.zzzz, v6.xyzx
dp3 r3.z, cb5[1].xyzx, r5.xyzx
div r3.z, -cb5[1].w, r3.z
mul r6.xyz, r3.zzzz, r5.xyzx
mov r6.w, l(1.000000)
dp4 r7.x, cb5[4].xyzw, r6.xyzw
dp4 r7.y, cb5[5].xyzw, r6.xyzw
sample_indexable(texture2d)(float,float,float,float) r3.zw, r7.xyxx, t3.zwxy, s3
add r3.zw, r3.zzzw, l(0.000000, 0.000000, -0.500000, -0.500000)
mad r6.xy, r3.zwzz, cb5[7].wwww, cb5[1].xyxx
mov r6.z, cb5[1].z
dp3 r3.z, r6.xyzx, r6.xyzx
rsq r3.z, r3.z
mul r7.xyz, r3.zzzz, r6.xyzx
dp3 r3.z, r7.xyzx, r5.xyzx
mul r3.w, -r7.z, cb5[7].y
mul r7.zw, r7.xxxy, r3.wwww
mad r7.zw, r7.zzzw, l(0.000000, 0.000000, 1.000000, -1.000000), r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r8.xyz, r7.zwzz, t1.xyzw, s1
mul r3.w, r3.z, l(-2.000000)
mad r7.xy, r3.wwww, r7.xyxx, r5.xyxx
mad r7.xy, r7.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r7.xyxx, t1.xyzw, s1
mad r0.x, r0.x, cb5[3].z, -v1.x
mul r3.w, r0.x, r3.x
mad r4.w, r0.y, cb5[0].z, -r2.w
div r3.w, r3.w, r4.w
mad r9.xy, r0.zwzz, l(2.000000, 2.00866485, 0.000000, 0.000000), l(-1.000000, -1.00866485, 0.000000, 0.000000)
dp2 r0.z, r9.xyxx, r9.xyxx
add r0.z, -r0.z, l(1.000000)
sqrt r9.z, r0.z
mul r0.z, -r9.z, cb5[7].y
mul r0.zw, r9.xxxy, r0.zzzz
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 1.000000, -1.000000), r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r10.xyz, r0.zwzz, t1.xyzw, s1
mul_sat r0.z, r3.w, l(12.000000)
add r0.z, -r0.z, l(1.000000)
mad r6.xyz, r9.xyzx, r0.zzzz, r6.xyzx
dp3 r0.z, r6.xyzx, r6.xyzx
rsq r0.z, r0.z
mul r6.xyz, r0.zzzz, r6.xyzx
dp3 r0.z, r6.xyzx, r5.xyzx
mul r0.w, r0.z, l(-2.000000)
mad r2.xy, r0.wwww, r6.xyxx, r5.xyxx
mad r2.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r2.xyxx, t1.xyzw, s1
if_nz r3.y
  lt r0.w, l(0.000000), r3.x
  if_nz r0.w
    mul r0.w, r0.x, l(100.000000)
    log r6.xyz, cb5[6].xyzx
    mul r6.xyz, r0.wwww, r6.xyzx
    exp r6.xyz, r6.xyzx
    mul r4.xyz, r4.xyzx, r6.xyzx
  else
    mul r0.x, r0.x, r2.w
    mad r0.w, -r0.y, cb5[0].z, r2.w
    div r0.x, r0.x, r0.w
    lt r0.w, cb5[7].z, -r3.z
    if_z r0.w
      mov r8.xyz, l(0,0,0,0)
    endif
    mul r2.xyw, r7.xyxz, cb5[9].xyxz
    add r0.w, r3.z, l(1.000000)
    log r0.w, |r0.w|
    mul r0.w, r0.w, cb5[9].w
    exp r0.w, r0.w
    mad r2.xyw, r2.xyxw, r0.wwww, r8.xyxz
    mul r0.x, r0.x, l(100.000000)
    log r3.xyz, cb5[6].xyzx
    mul r3.xyz, r0.xxxx, r3.xyzx
    exp r3.xyz, r3.xyzx
    mul r4.xyz, r2.xywx, r3.xyzx
  endif
  mov r2.xyw, l(0,0,0,0)
else
  mad r0.x, r0.y, cb5[0].z, l(-0.00196078443)
  lt r0.x, r0.x, l(0.000000)
  if_nz r0.x
    discard_nz l(-1)
    mov r4.xyz, l(0,0,0,0)
    mov r2.xyw, l(0,0,0,0)
  else
    mul r0.x, r3.w, l(100.000000)
    log r3.xyz, cb5[6].xyzx
    mul r0.xyw, r0.xxxx, r3.xyxz
    exp r0.xyw, r0.xyxw
    mul r4.xyz, r0.xywx, r10.xyzx
    mul r0.xyw, r5.xyxz, cb5[9].xyxz
    add r0.z, -r0.z, l(1.000000)
    log r0.z, |r0.z|
    mul r0.z, r0.z, cb5[9].w
    exp r0.z, r0.z
    mul r2.xyw, r0.zzzz, r0.xyxw
  endif
endif
mad r0.xyz, r4.xyzx, cb5[6].wwww, r2.xywx
add r0.w, -v4.z, l(1.000000)
mul r0.w, |r0.w|, r1.w
mad o0.xyz, r1.xyzx, r0.wwww, r0.xyzx
ult r0.x, l(0), cb11[0].z
utof r0.y, cb11[0].z
mad r0.y, -r0.y, l(0.00392156886), r2.z
lt r0.y, r0.y, l(0.000000)
and r0.x, r0.x, r0.y
discard_nz r0.x
mov o0.w, r2.z
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
