//Water surface VS.
// ---- Created with 3Dmigoto v1.3.16 on Sat Jan 30 12:34:08 2021
cbuffer cb7 : register(b7)
{
  float4 cb7[10];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.x = cb4[12].z;
  r0.y = cb4[13].z;
  r0.xy = v0.xy + -r0.xy;
  r1.x = -1 / cb4[12].x;
  r1.y = -1 / cb4[13].y;
  r0.xy = r1.xy * r0.xy;
  r0.z = -1;
  r1.x = dot(r0.xyz, cb7[0].xyz);
  r1.x = -cb7[0].w / r1.x;
  r0.w = v0.w;
  r0.xyzw = r1.xxxx * r0.xyzw;
  o0.x = dot(cb4[12].xyzw, r0.xyzw);
  o0.y = dot(cb4[13].xyzw, r0.xyzw);
  o0.z = dot(cb4[14].xyzw, r0.xyzw);
  o0.w = dot(cb4[15].xyzw, r0.xyzw);
  r0.x+=stereo.x*(r0.w-stereo.y)/cb4[12].x;
  o1.xyz = r0.xyz;
  r1.xy = v0.xy * float2(-0.5,0.5) + float2(0.5,0.5);
  o2.xy = r1.xy * r0.zz;
  o2.z = r0.z;
  o2.x+=stereo.x*(r0.w-stereo.y)*-0.5;
  r0.w = 1;
  //r0.x-=stereo.x*(r0.z-stereo.y);
  o3.y = dot(cb7[3].xyzw, r0.xyzw);
  r1.x = dot(cb7[2].xyzw, r0.xyzw);
  r1.z = dot(cb7[4].xyzw, r0.xyzw);
  o3.xz = r1.xz;
  r0.xy = -cb7[7].xy + r1.xz;
  o4.xy = cb7[7].zw * r0.xy;
  o5.xy = r1.xz * cb7[8].wz + cb7[8].xy;
  o5.zw = r1.xz * cb7[9].wz + cb7[9].xy;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jan 30 12:34:08 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xy w
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyz         3     NONE   float   xyz
// TEXCOORD                 3   xy          4     NONE   float   xy
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[16], immediateIndexed
dcl_constantbuffer cb7[10], immediateIndexed
dcl_input v0.xyw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o5.xyzw
dcl_temps 2
mov r0.x, cb4[12].z
mov r0.y, cb4[13].z
add r0.xy, -r0.xyxx, v0.xyxx
div r1.x, l(-1.000000), cb4[12].x
div r1.y, l(-1.000000), cb4[13].y
mul r0.xy, r0.xyxx, r1.xyxx
mov r0.z, l(-1.000000)
dp3 r1.x, r0.xyzx, cb7[0].xyzx
div r1.x, -cb7[0].w, r1.x
mov r0.w, v0.w
mul r0.xyzw, r0.xyzw, r1.xxxx
dp4 o0.x, cb4[12].xyzw, r0.xyzw
dp4 o0.y, cb4[13].xyzw, r0.xyzw
dp4 o0.z, cb4[14].xyzw, r0.xyzw
dp4 o0.w, cb4[15].xyzw, r0.xyzw
mov o1.xyz, r0.xyzx
mad r1.xy, v0.xyxx, l(-0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
mul o2.xy, r0.zzzz, r1.xyxx
mov o2.z, r0.z
mov r0.w, l(1.000000)
dp4 o3.y, cb7[3].xyzw, r0.xyzw
dp4 r1.x, cb7[2].xyzw, r0.xyzw
dp4 r1.z, cb7[4].xyzw, r0.xyzw
mov o3.xz, r1.xxzx
add r0.xy, r1.xzxx, -cb7[7].xyxx
mul o4.xy, r0.xyxx, cb7[7].zwzz
mad o5.xy, r1.xzxx, cb7[8].wzww, cb7[8].xyxx
mad o5.zw, r1.xxxz, cb7[9].wwwz, cb7[9].xxxy
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
