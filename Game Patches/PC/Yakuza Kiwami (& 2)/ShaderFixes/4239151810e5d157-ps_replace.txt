// ---- Created with 3Dmigoto v1.3.11 on Sun Aug 05 15:18:34 2018
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb9 : register(b9)
{
  float4 cb9[3];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float2 v0 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  
  
  r0.xyz = t0.Sample(s0_s, v0.xy).xyz;
  r1.xyz = float3(-0.5,-0.5,0) + r0.xyz;
  r0.xyzw = float4(-0.5,-0.5,-0.5,-0.5) + r0.yxxy;
  r1.x = dot(r1.xyz, r1.xyz);
  r1.x = rsqrt(r1.x);
  
  //r0.x+=stereo.x;
  
  r0.xyzw = r1.xxxx * r0.xyzw;
  r0.xyzw = cb9[2].xyzz * r0.xyzw;
  r0.xy = r0.xy + r0.zw;
  r0.z = dot(r0.xy, r0.xy);
  r0.w = rsqrt(r0.z);
  r0.z = sqrt(r0.z);
  r0.z = r0.z * cb9[0].y + 1;
  o0.z = 1 / r0.z;
  r0.xy = r0.xy * r0.ww + float2(1,1);
  o0.xy = float2(0.5,0.5) * r0.xy;
  o0.w = 0;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sun Aug 05 15:18:34 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb9[3], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v0.xy
dcl_output o0.xyzw
dcl_temps 2
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v0.xyxx, t0.xyzw, s0
add r1.xyz, r0.xyzx, l(-0.500000, -0.500000, 0.000000, 0.000000)
add r0.xyzw, r0.yxxy, l(-0.500000, -0.500000, -0.500000, -0.500000)
dp3 r1.x, r1.xyzx, r1.xyzx
rsq r1.x, r1.x
mul r0.xyzw, r0.xyzw, r1.xxxx
mul r0.xyzw, r0.xyzw, cb9[2].xyzz
add r0.xy, r0.zwzz, r0.xyxx
dp2 r0.z, r0.xyxx, r0.xyxx
rsq r0.w, r0.z
sqrt r0.z, r0.z
mad r0.z, r0.z, cb9[0].y, l(1.000000)
div o0.z, l(1.000000, 1.000000, 1.000000, 1.000000), r0.z
mad r0.xy, r0.xyxx, r0.wwww, l(1.000000, 1.000000, 0.000000, 0.000000)
mul o0.xy, r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mov o0.w, l(0)
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
