//Glass reflection PS for real.
// ---- Created with 3Dmigoto v1.3.11 on Sat Aug 04 15:20:21 2018
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb9 : register(b9)
{
  float4 cb9[10];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float3 v5 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.xy = v1.xy / v1.zz;
  r0.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r1.x = -0.00196078443 + r0.w;
  r1.x = cmp(r1.x < 0);
  if (r1.x != 0) discard;
  r1.xyzw = t2.Sample(s2_s, v2.zw).xyzw;
  v2.x+=stereo.x*(v1.z-stereo.y)*0.5;
  r2.xy = v2.xy / v1.zz;
  o0.w = 1 + -r1.w;
  r2.z = dot(cb9[2].xyz, -v3.xyz);
  r2.z = cb9[2].w * r2.z + cb9[0].w;
  r2.w = t3.Sample(s3_s, v0.zw).w;
  r2.z = r2.z * r2.w + v0.y;
  //r2.x+=stereo.x*(r2.w-stereo.y)*0.5;
  r0.x = -cb9[3].x + r0.x;
  r0.y = -cb9[0].x + r0.y;
  r2.w = cb9[0].z * r0.y;
  r3.x = cmp(0 < r2.z);
  r3.yz = v4.xy * float2(1,-1) + r2.xy;
  r3.yzw = t1.Sample(s1_s, r3.yz).xyz;
  r4.x = dot(v5.xyz, v5.xyz);
  r4.x = rsqrt(r4.x);
  r4.xyz = v5.xyz * r4.xxx;
  r4.w = dot(cb9[1].xyz, r4.xyz);
  r4.w = -cb9[1].w / r4.w;
  r5.xyz = r4.xyz * r4.www;
  r5.w = 1;
  r6.x = dot(cb9[4].xyzw, r5.xyzw);
  r6.y = dot(cb9[5].xyzw, r5.xyzw);
  r5.xy = t3.Sample(s3_s, r6.xy).xy;
  r5.xy = float2(-0.5,-0.5) + r5.xy;
  r5.xy = r5.xy * cb9[7].ww + cb9[1].xy;
  r5.z = cb9[1].z;
  r4.w = dot(r5.xyz, r5.xyz);
  r4.w = rsqrt(r4.w);
  r6.xyz = r5.xyz * r4.www;
  r4.w = dot(r6.xyz, r4.xyz);
  r5.w = cb9[7].y * -r6.z;
  r6.zw = r5.ww * r6.xy;
  r6.zw = r6.zw * float2(1,-1) + r2.xy;
  r7.xyz = t1.Sample(s1_s, r6.zw).xyz;
  r5.w = -2 * r4.w;
  r6.xy = r5.ww * r6.xy + r4.xy;
  r6.xy = r6.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r6.xyz = t1.Sample(s1_s, r6.xy).xyz;
  r0.x = r0.x * cb9[3].z + -v0.x;
  r5.w = r2.w * r0.x;
  r6.w = r0.y * cb9[0].z + -r2.z;
  r5.w = r5.w / r6.w;
  r8.xy = r0.zw * float2(2,2.00866485) + float2(-1,-1.00866485);
  r0.z = dot(r8.xy, r8.xy);
  r0.z = 1 + -r0.z;
  r8.z = sqrt(r0.z);
  r0.z = cb9[7].y * -r8.z;
  r0.zw = r0.zz * r8.xy;
  r0.zw = r0.zw * float2(1,-1) + r2.xy;
  r9.xyz = t1.Sample(s1_s, r0.zw).xyz;
  r0.z = saturate(12 * r5.w);
  r0.z = 1 + -r0.z;
  r5.xyz = r8.xyz * r0.zzz + r5.xyz;
  r0.z = dot(r5.xyz, r5.xyz);
  r0.z = rsqrt(r0.z);
  r5.xyz = r5.xyz * r0.zzz;
  r0.z = dot(r5.xyz, r4.xyz);
  r0.w = -2 * r0.z;
  r2.xy = r0.ww * r5.xy + r4.xy;
  r2.xy = r2.xy * float2(0.5,-0.5) + float2(0.5,0.5);
  r4.xyz = t1.Sample(s1_s, r2.xy).xyz;
  if (r3.x != 0) {
    r0.w = cmp(0 < r2.w);
    if (r0.w != 0) {
      r0.w = 100 * r0.x;
      r2.xyw = log2(cb9[6].xyz);
      r2.xyw = r2.xyw * r0.www;
      r2.xyw = exp2(r2.xyw);
      r2.xyw = r3.yzw * r2.xyw;
    } else {
      r0.x = r2.z * r0.x;
      r0.w = -r0.y * cb9[0].z + r2.z;
      r0.x = r0.x / r0.w;
      r0.w = cmp(cb9[7].z < -r4.w);
      if (r0.w == 0) {
        r7.xyz = float3(0,0,0);
      }
      r3.xyz = cb9[9].xyz * r6.xyz;
      r0.w = 1 + r4.w;
      r0.w = log2(abs(r0.w));
      r0.w = cb9[9].w * r0.w;
      r0.w = exp2(r0.w);
      r3.xyz = r3.xyz * r0.www + r7.xyz;
      r0.x = 100 * r0.x;
      r5.xyz = log2(cb9[6].xyz);
      r5.xyz = r5.xyz * r0.xxx;
      r5.xyz = exp2(r5.xyz);
      r2.xyw = r5.xyz * r3.xyz;
    }
    r3.xyz = float3(0,0,0);
  } else {
    r0.x = r0.y * cb9[0].z + -0.00196078443;
    r0.x = cmp(r0.x < 0);
    if (r0.x != 0) {
      if (-1 != 0) discard;
      r2.xyw = float3(0,0,0);
      r3.xyz = float3(0,0,0);
    } else {
      r0.x = 100 * r5.w;
      r5.xyz = log2(cb9[6].xyz);
      r0.xyw = r5.xyz * r0.xxx;
      r0.xyw = exp2(r0.xyw);
      r2.xyw = r9.xyz * r0.xyw;
      r0.xyw = cb9[9].xyz * r4.xyz;
      r0.z = 1 + -r0.z;
      r0.z = log2(abs(r0.z));
      r0.z = cb9[9].w * r0.z;
      r0.z = exp2(r0.z);
      r3.xyz = r0.xyw * r0.zzz;
    }
  }
  r0.xyz = r2.xyw * cb9[6].www + r3.xyz;
  r0.w = cb9[8].w * r1.w;
  r1.w = 1 + -v3.z;
  r0.w = abs(r1.w) * r0.w;
  o0.xyz = r1.xyz * r0.www + r0.xyz;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sat Aug 04 15:20:21 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyz         3     NONE   float   xyz
// TEXCOORD                 4   xy          4     NONE   float   xy
// TEXCOORD                 5   xyz         5     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb9[10], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xy
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 10
div r0.xy, v1.xyxx, v1.zzzz
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, r0.xyxx, t0.xyzw, s0
add r1.x, r0.w, l(-0.00196078443)
lt r1.x, r1.x, l(0.000000)
discard_nz r1.x
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v2.zwzz, t2.xyzw, s2
div r2.xy, v2.xyxx, v1.zzzz
add o0.w, -r1.w, l(1.000000)
dp3 r2.z, cb9[2].xyzx, -v3.xyzx
mad r2.z, cb9[2].w, r2.z, cb9[0].w
sample_indexable(texture2d)(float,float,float,float) r2.w, v0.zwzz, t3.xyzw, s3
mad r2.z, r2.z, r2.w, v0.y
add r0.x, r0.x, -cb9[3].x
add r0.y, r0.y, -cb9[0].x
mul r2.w, r0.y, cb9[0].z
lt r3.x, l(0.000000), r2.z
mad r3.yz, v4.xxyx, l(0.000000, 1.000000, -1.000000, 0.000000), r2.xxyx
sample_indexable(texture2d)(float,float,float,float) r3.yzw, r3.yzyy, t1.wxyz, s1
dp3 r4.x, v5.xyzx, v5.xyzx
rsq r4.x, r4.x
mul r4.xyz, r4.xxxx, v5.xyzx
dp3 r4.w, cb9[1].xyzx, r4.xyzx
div r4.w, -cb9[1].w, r4.w
mul r5.xyz, r4.wwww, r4.xyzx
mov r5.w, l(1.000000)
dp4 r6.x, cb9[4].xyzw, r5.xyzw
dp4 r6.y, cb9[5].xyzw, r5.xyzw
sample_indexable(texture2d)(float,float,float,float) r5.xy, r6.xyxx, t3.xyzw, s3
add r5.xy, r5.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mad r5.xy, r5.xyxx, cb9[7].wwww, cb9[1].xyxx
mov r5.z, cb9[1].z
dp3 r4.w, r5.xyzx, r5.xyzx
rsq r4.w, r4.w
mul r6.xyz, r4.wwww, r5.xyzx
dp3 r4.w, r6.xyzx, r4.xyzx
mul r5.w, -r6.z, cb9[7].y
mul r6.zw, r6.xxxy, r5.wwww
mad r6.zw, r6.zzzw, l(0.000000, 0.000000, 1.000000, -1.000000), r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r7.xyz, r6.zwzz, t1.xyzw, s1
mul r5.w, r4.w, l(-2.000000)
mad r6.xy, r5.wwww, r6.xyxx, r4.xyxx
mad r6.xy, r6.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t1.xyzw, s1
mad r0.x, r0.x, cb9[3].z, -v0.x
mul r5.w, r0.x, r2.w
mad r6.w, r0.y, cb9[0].z, -r2.z
div r5.w, r5.w, r6.w
mad r8.xy, r0.zwzz, l(2.000000, 2.00866485, 0.000000, 0.000000), l(-1.000000, -1.00866485, 0.000000, 0.000000)
dp2 r0.z, r8.xyxx, r8.xyxx
add r0.z, -r0.z, l(1.000000)
sqrt r8.z, r0.z
mul r0.z, -r8.z, cb9[7].y
mul r0.zw, r8.xxxy, r0.zzzz
mad r0.zw, r0.zzzw, l(0.000000, 0.000000, 1.000000, -1.000000), r2.xxxy
sample_indexable(texture2d)(float,float,float,float) r9.xyz, r0.zwzz, t1.xyzw, s1
mul_sat r0.z, r5.w, l(12.000000)
add r0.z, -r0.z, l(1.000000)
mad r5.xyz, r8.xyzx, r0.zzzz, r5.xyzx
dp3 r0.z, r5.xyzx, r5.xyzx
rsq r0.z, r0.z
mul r5.xyz, r0.zzzz, r5.xyzx
dp3 r0.z, r5.xyzx, r4.xyzx
mul r0.w, r0.z, l(-2.000000)
mad r2.xy, r0.wwww, r5.xyxx, r4.xyxx
mad r2.xy, r2.xyxx, l(0.500000, -0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r2.xyxx, t1.xyzw, s1
if_nz r3.x
  lt r0.w, l(0.000000), r2.w
  if_nz r0.w
    mul r0.w, r0.x, l(100.000000)
    log r2.xyw, cb9[6].xyxz
    mul r2.xyw, r0.wwww, r2.xyxw
    exp r2.xyw, r2.xyxw
    mul r2.xyw, r2.xyxw, r3.yzyw
  else
    mul r0.x, r0.x, r2.z
    mad r0.w, -r0.y, cb9[0].z, r2.z
    div r0.x, r0.x, r0.w
    lt r0.w, cb9[7].z, -r4.w
    if_z r0.w
      mov r7.xyz, l(0,0,0,0)
    endif
    mul r3.xyz, r6.xyzx, cb9[9].xyzx
    add r0.w, r4.w, l(1.000000)
    log r0.w, |r0.w|
    mul r0.w, r0.w, cb9[9].w
    exp r0.w, r0.w
    mad r3.xyz, r3.xyzx, r0.wwww, r7.xyzx
    mul r0.x, r0.x, l(100.000000)
    log r5.xyz, cb9[6].xyzx
    mul r5.xyz, r0.xxxx, r5.xyzx
    exp r5.xyz, r5.xyzx
    mul r2.xyw, r3.xyxz, r5.xyxz
  endif
  mov r3.xyz, l(0,0,0,0)
else
  mad r0.x, r0.y, cb9[0].z, l(-0.00196078443)
  lt r0.x, r0.x, l(0.000000)
  if_nz r0.x
    discard_nz l(-1)
    mov r2.xyw, l(0,0,0,0)
    mov r3.xyz, l(0,0,0,0)
  else
    mul r0.x, r5.w, l(100.000000)
    log r5.xyz, cb9[6].xyzx
    mul r0.xyw, r0.xxxx, r5.xyxz
    exp r0.xyw, r0.xyxw
    mul r2.xyw, r0.xyxw, r9.xyxz
    mul r0.xyw, r4.xyxz, cb9[9].xyxz
    add r0.z, -r0.z, l(1.000000)
    log r0.z, |r0.z|
    mul r0.z, r0.z, cb9[9].w
    exp r0.z, r0.z
    mul r3.xyz, r0.zzzz, r0.xywx
  endif
endif
mad r0.xyz, r2.xywx, cb9[6].wwww, r3.xyzx
mul r0.w, r1.w, cb9[8].w
add r1.w, -v3.z, l(1.000000)
mul r0.w, r0.w, |r1.w|
mad o0.xyz, r1.xyzx, r0.wwww, r0.xyzx
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
