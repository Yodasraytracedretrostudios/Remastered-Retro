//Cards haloing with shadows.
// ---- Created with 3Dmigoto v1.3.11 on Tue Aug 07 23:34:08 2018
Texture2D<float4> t13 : register(t13);

Texture2D<float4> t0 : register(t0);

SamplerState s13_s : register(s13);

SamplerState s0_s : register(s0);

cbuffer cb3 : register(b3)
{
  float4 cb3[6];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[10];
}

cbuffer cb9 : register(b9)
{
  float4 cb9[1];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float3 v3 : TEXCOORD2,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  v2.x+=stereo.x*(v2.w-stereo.y)*0.5;
  r0.xyz = t0.Sample(s0_s, v1.xy).xyz;
  r0.xyz = r0.xyz * r0.xyz;
  r1.xyz = v3.xyz * r0.xyz;
  r2.xyz = int3(8,16,0) & asint(cb13[0].xxx);
  if (r2.x != 0) {
    r3.xy = v2.xy / v2.ww;
    r3.xy = t13.Sample(s13_s, r3.xy).xy;
  } else {
    r3.xy = float2(1,1);
  }
  r3.zw = r3.xy * cb1[9].xz + cb1[9].yw;
  r3.xy = r2.xx ? r3.zw : r3.xy;
  r0.w = r3.x * r3.y;
  r3.xyz = -cb3[5].xyz + float3(1,1,1);
  r3.xyz = r0.www * r3.xyz + cb3[5].xyz;
  r3.xyz = r2.xxx ? r3.xyz : float3(1,1,1);
  r0.xyz = cb9[0].xyz * r0.xyz;
  r0.xyz = r1.xyz * r3.xyz + r0.xyz;
  r1.xyz = cb1[0].xxx * r0.xyz;
  r3.xyz = log2(r1.xyz);
  r3.xyz = cb1[0].yyy * r3.xyz;
  r3.xyz = exp2(r3.xyz);
  r4.xyz = r1.xyz + r1.xyz;
  r5.xyz = r1.xyz * float3(0.300000012,0.300000012,0.300000012) + float3(0.0500000007,0.0500000007,0.0500000007);
  r5.xyz = r4.xyz * r5.xyz + float3(0.00400000019,0.00400000019,0.00400000019);
  r1.xyz = r1.xyz * float3(0.300000012,0.300000012,0.300000012) + float3(0.5,0.5,0.5);
  r1.xyz = r4.xyz * r1.xyz + float3(0.0599999987,0.0599999987,0.0599999987);
  r1.xyz = r5.xyz / r1.xyz;
  r1.xyz = float3(-0.0666666701,-0.0666666701,-0.0666666701) + r1.xyz;
  r1.xyz = saturate(float3(1.37906432,1.37906432,1.37906432) * r1.xyz);
  r1.xyz = sqrt(r1.xyz);
  r0.xyz = r2.zzz ? r0.xyz : r1.xyz;
  r0.xyz = r2.yyy ? r3.xyz : r0.xyz;
  r0.w = 1;
  r1.xyzw = cb1[3].xyzw * r0.xyzw;
  o0.xyzw = r2.xxxx ? r0.xyzw : r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Tue Aug 07 23:34:08 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xy w
// TEXCOORD                 2   xyz         3     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb9[1], immediateIndexed
dcl_constantbuffer cb1[10], immediateIndexed
dcl_constantbuffer cb3[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s13, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t13
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyw
dcl_input_ps linear v3.xyz
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.xyxx, t0.xyzw, s0
mul r0.xyz, r0.xyzx, r0.xyzx
mul r1.xyz, r0.xyzx, v3.xyzx
and r2.xyz, l(8, 16, 0x00008000, 0), cb13[0].xxxx
if_nz r2.x
  div r3.xy, v2.xyxx, v2.wwww
  sample_indexable(texture2d)(float,float,float,float) r3.xy, r3.xyxx, t13.xyzw, s13
else
  mov r3.xy, l(1.000000,1.000000,0,0)
endif
mad r3.zw, r3.xxxy, cb1[9].xxxz, cb1[9].yyyw
movc r3.xy, r2.xxxx, r3.zwzz, r3.xyxx
mul r0.w, r3.y, r3.x
add r3.xyz, l(1.000000, 1.000000, 1.000000, 0.000000), -cb3[5].xyzx
mad r3.xyz, r0.wwww, r3.xyzx, cb3[5].xyzx
movc r3.xyz, r2.xxxx, r3.xyzx, l(1.000000,1.000000,1.000000,0)
mul r0.xyz, r0.xyzx, cb9[0].xyzx
mad r0.xyz, r1.xyzx, r3.xyzx, r0.xyzx
mul r1.xyz, r0.xyzx, cb1[0].xxxx
log r3.xyz, r1.xyzx
mul r3.xyz, r3.xyzx, cb1[0].yyyy
exp r3.xyz, r3.xyzx
add r4.xyz, r1.xyzx, r1.xyzx
mad r5.xyz, r1.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), l(0.050000, 0.050000, 0.050000, 0.000000)
mad r5.xyz, r4.xyzx, r5.xyzx, l(0.004000, 0.004000, 0.004000, 0.000000)
mad r1.xyz, r1.xyzx, l(0.300000, 0.300000, 0.300000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
mad r1.xyz, r4.xyzx, r1.xyzx, l(0.060000, 0.060000, 0.060000, 0.000000)
div r1.xyz, r5.xyzx, r1.xyzx
add r1.xyz, r1.xyzx, l(-0.0666666701, -0.0666666701, -0.0666666701, 0.000000)
mul_sat r1.xyz, r1.xyzx, l(1.37906432, 1.37906432, 1.37906432, 0.000000)
sqrt r1.xyz, r1.xyzx
movc r0.xyz, r2.zzzz, r0.xyzx, r1.xyzx
movc r0.xyz, r2.yyyy, r3.xyzx, r0.xyzx
mov r0.w, l(1.000000)
mul r1.xyzw, r0.xyzw, cb1[3].xyzw
movc o0.xyzw, r2.xxxx, r0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
