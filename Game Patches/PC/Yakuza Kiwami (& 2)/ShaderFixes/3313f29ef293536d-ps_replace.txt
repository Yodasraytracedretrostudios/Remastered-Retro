//And more face shadows (foreigner).
// ---- Created with 3Dmigoto v1.3.11 on Sat Aug 04 16:47:45 2018
Texture2D<float4> t15 : register(t15);

Texture2D<float4> t14 : register(t14);

Texture2D<float4> t13 : register(t13);

Texture2D<float4> t12 : register(t12);

SamplerComparisonState s15_s : register(s15);

SamplerComparisonState s14_s : register(s14);

SamplerComparisonState s13_s : register(s13);

SamplerComparisonState s12_s : register(s12);

cbuffer cb1 : register(b1)
{
  float4 cb1[11];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float4 v7 : TEXCOORD7,
  float4 v8 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.xyz = v0.xyz / v0.www;
  
  r0.w = cb1[10].w * 0.0009765625;
  r1.xyzw = cb1[10].wwww * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.xyxy;
  
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r2.xy = r2.yw ? r2.xz : 0;
  r0.z = min(1, r0.z);
  r1.x = t14.SampleCmp(s14_s, r1.xy, r0.z).x;
  if (r2.x == 0) {
    r1.x = 1;
  }
  r3.x = r2.x ? r1.x : 1;
  r1.x = t14.SampleCmp(s14_s, r1.zw, r0.z).x;
  if (r2.y == 0) {
    r1.x = 1;
  }
  r3.y = r2.y ? r1.x : 1;
  r1.xyzw = cb1[10].wwww * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.xyxy;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r0.xy = r2.yw ? r2.xz : 0;
  r1.x = t14.SampleCmp(s14_s, r1.xy, r0.z).x;
  if (r0.x == 0) {
    r1.x = 1;
  }
  r3.z = r0.x ? r1.x : 1;
  r0.x = t14.SampleCmp(s14_s, r1.zw, r0.z).x;
  if (r0.y == 0) {
    r0.x = 1;
  }
  r3.w = r0.y ? r0.x : 1;
  r0.x = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r1.xyz = v1.xyz / v1.www;
  r2.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r1.xyxy;
  r3.xyzw = saturate(r2.xyzw);
  r3.xyzw = cmp(r2.xyzw == r3.xyzw);
  r0.yz = r3.yw ? r3.xz : 0;
  r1.z = min(1, r1.z);
  r1.w = t15.SampleCmp(s15_s, r2.xy, r1.z).x;
  if (r0.y == 0) {
    r1.w = 1;
  }
  r3.x = r0.y ? r1.w : 1;
  r0.y = t15.SampleCmp(s15_s, r2.zw, r1.z).x;
  if (r0.z == 0) {
    r0.y = 1;
  }
  r3.y = r0.z ? r0.y : 1;
  r2.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r1.xyxy;
  r4.xyzw = saturate(r2.xyzw);
  r4.xyzw = cmp(r2.xyzw == r4.xyzw);
  r0.yz = r4.yw ? r4.xz : 0;
  r1.x = t15.SampleCmp(s15_s, r2.xy, r1.z).x;
  if (r0.y == 0) {
    r1.x = 1;
  }
  r3.z = r0.y ? r1.x : 1;
  r0.y = t15.SampleCmp(s15_s, r2.zw, r1.z).x;
  if (r0.z == 0) {
    r0.y = 1;
  }
  r3.w = r0.z ? r0.y : 1;
  r0.y = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r1.xyz = v2.xyz / v2.www;
  //r1.x+=stereo.x*(stereo.y+r1.z);
  r0.yz = float2(-0.5,-0.5) + v8.xy;
  r0.yz = float2(0.5,0.5) * r0.yz;
  r0.yz = frac(r0.yz);
  r0.yz = cmp(float2(0.25,0.25) < r0.yz);
  r2.xy = r0.yz ? float2(1,1) : 0;
  r0.y = r2.y + r2.x;
  r0.z = cmp(1.10000002 < r0.y);
  r2.z = r0.z ? 0 : r0.y;
  r0.yz = float2(-0.5,-0.5) + r2.xz;
  r0.yz = r0.ww * r0.yz + r1.xy;
  r1.xy = saturate(r0.yz);
  r1.xy = cmp(r0.yz == r1.xy);
  r0.w = r1.y ? r1.x : 0;
  r1.x = min(1, r1.z);
  r0.y = t13.SampleCmp(s13_s, r0.yz, r1.x).x;
  if (r0.w == 0) {
    r0.y = 1;
  }
  r0.x = r0.x * r0.y;
  r0.yzw = v4.xyz / v4.www;
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r2.xy = r2.yw ? r2.xz : 0;
  r1.xyzw = float4(0.5,0.5,0.5,0.5) * r1.xyzw;
  r0.w = min(1, r0.w);
  r3.x = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r2.x != 0) {
    r2.xz = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xz);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.x = 1;
    }
  } else {
    r3.x = 1;
  }
  r3.y = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r2.y != 0) {
    r1.xy = saturate(r1.zw);
    r1.xy = cmp(r1.zw == r1.xy);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.y = 1;
    }
  } else {
    r3.y = 1;
  }
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r0.yz = r2.yw ? r2.xz : 0;
  r1.xyzw = float4(0.5,0.5,0.5,0.5) * r1.xyzw;
  r3.z = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r0.y != 0) {
    r2.xy = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xy);
    r0.y = r1.y ? r1.x : 0;
    if (r0.y == 0) {
      r3.z = 1;
    }
  } else {
    r3.z = 1;
  }
  r3.w = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r0.z != 0) {
    r0.yz = saturate(r1.zw);
    r0.yz = cmp(r1.zw == r0.yz);
    r0.y = r0.z ? r0.y : 0;
    if (r0.y == 0) {
      r3.w = 1;
    }
  } else {
    r3.w = 1;
  }
  r0.y = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r0.yzw = v5.xyz / v5.www;
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r2.xy = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0,0.5,0);
  r0.w = min(1, r0.w);
  r3.x = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r2.x != 0) {
    r2.xz = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xz);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.x = 1;
    }
  } else {
    r3.x = 1;
  }
  r3.y = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r2.y != 0) {
    r1.xy = saturate(r1.zw);
    r1.xy = cmp(r1.zw == r1.xy);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.y = 1;
    }
  } else {
    r3.y = 1;
  }
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r0.yz = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0,0.5,0);
  r3.z = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r0.y != 0) {
    r2.xy = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xy);
    r0.y = r1.y ? r1.x : 0;
    if (r0.y == 0) {
      r3.z = 1;
    }
  } else {
    r3.z = 1;
  }
  r3.w = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r0.z != 0) {
    r0.yz = saturate(r1.zw);
    r0.yz = cmp(r1.zw == r0.yz);
    r0.y = r0.z ? r0.y : 0;
    if (r0.y == 0) {
      r3.w = 1;
    }
  } else {
    r3.w = 1;
  }
  r0.y = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r0.yzw = v6.xyz / v6.www;
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r2.xy = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0,0.5,0,0.5);
  r0.w = min(1, r0.w);
  r3.x = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r2.x != 0) {
    r2.xz = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xz);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.x = 1;
    }
  } else {
    r3.x = 1;
  }
  r3.y = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r2.y != 0) {
    r1.xy = saturate(r1.zw);
    r1.xy = cmp(r1.zw == r1.xy);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.y = 1;
    }
  } else {
    r3.y = 1;
  }
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r0.yz = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0,0.5,0,0.5);
  r3.z = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r0.y != 0) {
    r2.xy = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xy);
    r0.y = r1.y ? r1.x : 0;
    if (r0.y == 0) {
      r3.z = 1;
    }
  } else {
    r3.z = 1;
  }
  r3.w = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r0.z != 0) {
    r0.yz = saturate(r1.zw);
    r0.yz = cmp(r1.zw == r0.yz);
    r0.y = r0.z ? r0.y : 0;
    if (r0.y == 0) {
      r3.w = 1;
    }
  } else {
    r3.w = 1;
  }
  r0.y = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.x = r0.x * r0.y;
  r0.yzw = v7.xyz / v7.www;
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r2.xy = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r0.w = min(1, r0.w);
  r3.x = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r2.x != 0) {
    r2.xz = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xz);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.x = 1;
    }
  } else {
    r3.x = 1;
  }
  r3.y = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r2.y != 0) {
    r1.xy = saturate(r1.zw);
    r1.xy = cmp(r1.zw == r1.xy);
    r1.x = r1.y ? r1.x : 0;
    if (r1.x == 0) {
      r3.y = 1;
    }
  } else {
    r3.y = 1;
  }
  r1.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.yzyz;
  r2.xyzw = saturate(r1.xyzw);
  r2.xyzw = cmp(r1.xyzw == r2.xyzw);
  r0.yz = r2.yw ? r2.xz : 0;
  r1.xyzw = r1.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r3.z = t12.SampleCmp(s12_s, r1.xy, r0.w).x;
  if (r0.y != 0) {
    r2.xy = saturate(r1.xy);
    r1.xy = cmp(r1.xy == r2.xy);
    r0.y = r1.y ? r1.x : 0;
    if (r0.y == 0) {
      r3.z = 1;
    }
  } else {
    r3.z = 1;
  }
  r3.w = t12.SampleCmp(s12_s, r1.zw, r0.w).x;
  if (r0.z != 0) {
    r0.yz = saturate(r1.zw);
    r0.yz = cmp(r1.zw == r0.yz);
    r0.y = r0.z ? r0.y : 0;
    if (r0.y == 0) {
      r3.w = 1;
    }
  } else {
    r3.w = 1;
  }
  r0.y = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.y = r0.x * r0.y;
  r0.z = 8 & asint(cb13[0].x);
  r0.xw = float2(1,1);
  o0.xyw = r0.zzz ? r0.xyw : r0.yww;
  r0.x = saturate(v3.x);
  o0.z = r0.x * r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sat Aug 04 16:47:45 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyzw        1     NONE   float   xyzw
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xy          3     NONE   float   x
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_sampler s12, mode_comparison
dcl_sampler s13, mode_comparison
dcl_sampler s14, mode_comparison
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.x
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyzw
dcl_input_ps linear v6.xyzw
dcl_input_ps linear v7.xyzw
dcl_input_ps_siv linear noperspective v8.xy, position
dcl_output o0.xyzw
dcl_temps 5
div r0.xyz, v0.xyzx, v0.wwww
mul r0.w, l(0.000976562500), cb1[10].w
mad r1.xyzw, cb1[10].wwww, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.xyxy
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r2.xy, r2.ywyy, r2.xzxx
min r0.z, r0.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t14.xxxx, s14, r0.z
if_z r2.x
  mov r1.x, l(1.000000)
endif
movc r3.x, r2.x, r1.x, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r1.x, r1.zwzz, t14.xxxx, s14, r0.z
if_z r2.y
  mov r1.x, l(1.000000)
endif
movc r3.y, r2.y, r1.x, l(1.000000)
mad r1.xyzw, cb1[10].wwww, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.xyxy
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r0.xy, r2.ywyy, r2.xzxx
sample_c_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t14.xxxx, s14, r0.z
if_z r0.x
  mov r1.x, l(1.000000)
endif
movc r3.z, r0.x, r1.x, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.x, r1.zwzz, t14.xxxx, s14, r0.z
if_z r0.y
  mov r0.x, l(1.000000)
endif
movc r3.w, r0.y, r0.x, l(1.000000)
dp4 r0.x, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
div r1.xyz, v1.xyzx, v1.wwww
mad r2.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r1.xyxy
mov_sat r3.xyzw, r2.xyzw
eq r3.xyzw, r2.xyzw, r3.xyzw
and r0.yz, r3.yywy, r3.xxzx
min r1.z, r1.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t15.xxxx, s15, r1.z
if_z r0.y
  mov r1.w, l(1.000000)
endif
movc r3.x, r0.y, r1.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r2.zwzz, t15.xxxx, s15, r1.z
if_z r0.z
  mov r0.y, l(1.000000)
endif
movc r3.y, r0.z, r0.y, l(1.000000)
mad r2.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r1.xyxy
mov_sat r4.xyzw, r2.xyzw
eq r4.xyzw, r2.xyzw, r4.xyzw
and r0.yz, r4.yywy, r4.xxzx
sample_c_indexable(texture2d)(float,float,float,float) r1.x, r2.xyxx, t15.xxxx, s15, r1.z
if_z r0.y
  mov r1.x, l(1.000000)
endif
movc r3.z, r0.y, r1.x, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r2.zwzz, t15.xxxx, s15, r1.z
if_z r0.z
  mov r0.y, l(1.000000)
endif
movc r3.w, r0.z, r0.y, l(1.000000)
dp4 r0.y, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.x, r0.y, r0.x
div r1.xyz, v2.xyzx, v2.wwww
add r0.yz, v8.xxyx, l(0.000000, -0.500000, -0.500000, 0.000000)
mul r0.yz, r0.yyzy, l(0.000000, 0.500000, 0.500000, 0.000000)
frc r0.yz, r0.yyzy
lt r0.yz, l(0.000000, 0.250000, 0.250000, 0.000000), r0.yyzy
and r2.xy, r0.yzyy, l(0x3f800000, 0x3f800000, 0, 0)
add r0.y, r2.x, r2.y
lt r0.z, l(1.100000), r0.y
movc r2.z, r0.z, l(0), r0.y
add r0.yz, r2.xxzx, l(0.000000, -0.500000, -0.500000, 0.000000)
mad r0.yz, r0.wwww, r0.yyzy, r1.xxyx
mov_sat r1.xy, r0.yzyy
eq r1.xy, r0.yzyy, r1.xyxx
and r0.w, r1.y, r1.x
min r1.x, r1.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r0.yzyy, t13.xxxx, s13, r1.x
if_z r0.w
  mov r0.y, l(1.000000)
endif
mul r0.x, r0.y, r0.x
div r0.yzw, v4.xxyz, v4.wwww
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r2.xy, r2.ywyy, r2.xzxx
mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
min r0.w, r0.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r2.x
  mov_sat r2.xz, r1.xxyx
  eq r1.xy, r1.xyxx, r2.xzxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.x, l(1.000000)
  endif
else
  mov r3.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r2.y
  mov_sat r1.xy, r1.zwzz
  eq r1.xy, r1.zwzz, r1.xyxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.y, l(1.000000)
  endif
else
  mov r3.y, l(1.000000)
endif
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r0.yz, r2.yywy, r2.xxzx
mul r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r3.z, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r0.y
  mov_sat r2.xy, r1.xyxx
  eq r1.xy, r1.xyxx, r2.xyxx
  and r0.y, r1.y, r1.x
  if_z r0.y
    mov r3.z, l(1.000000)
  endif
else
  mov r3.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.w, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r0.z
  mov_sat r0.yz, r1.zzwz
  eq r0.yz, r1.zzwz, r0.yyzy
  and r0.y, r0.z, r0.y
  if_z r0.y
    mov r3.w, l(1.000000)
  endif
else
  mov r3.w, l(1.000000)
endif
dp4 r0.y, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.x, r0.y, r0.x
div r0.yzw, v5.xxyz, v5.wwww
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r2.xy, r2.ywyy, r2.xzxx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.000000, 0.500000, 0.000000)
min r0.w, r0.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r2.x
  mov_sat r2.xz, r1.xxyx
  eq r1.xy, r1.xyxx, r2.xzxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.x, l(1.000000)
  endif
else
  mov r3.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r2.y
  mov_sat r1.xy, r1.zwzz
  eq r1.xy, r1.zwzz, r1.xyxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.y, l(1.000000)
  endif
else
  mov r3.y, l(1.000000)
endif
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r0.yz, r2.yywy, r2.xxzx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.000000, 0.500000, 0.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.z, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r0.y
  mov_sat r2.xy, r1.xyxx
  eq r1.xy, r1.xyxx, r2.xyxx
  and r0.y, r1.y, r1.x
  if_z r0.y
    mov r3.z, l(1.000000)
  endif
else
  mov r3.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.w, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r0.z
  mov_sat r0.yz, r1.zzwz
  eq r0.yz, r1.zzwz, r0.yyzy
  and r0.y, r0.z, r0.y
  if_z r0.y
    mov r3.w, l(1.000000)
  endif
else
  mov r3.w, l(1.000000)
endif
dp4 r0.y, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.x, r0.y, r0.x
div r0.yzw, v6.xxyz, v6.wwww
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r2.xy, r2.ywyy, r2.xzxx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
min r0.w, r0.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r2.x
  mov_sat r2.xz, r1.xxyx
  eq r1.xy, r1.xyxx, r2.xzxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.x, l(1.000000)
  endif
else
  mov r3.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r2.y
  mov_sat r1.xy, r1.zwzz
  eq r1.xy, r1.zwzz, r1.xyxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.y, l(1.000000)
  endif
else
  mov r3.y, l(1.000000)
endif
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r0.yz, r2.yywy, r2.xxzx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r3.z, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r0.y
  mov_sat r2.xy, r1.xyxx
  eq r1.xy, r1.xyxx, r2.xyxx
  and r0.y, r1.y, r1.x
  if_z r0.y
    mov r3.z, l(1.000000)
  endif
else
  mov r3.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.w, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r0.z
  mov_sat r0.yz, r1.zzwz
  eq r0.yz, r1.zzwz, r0.yyzy
  and r0.y, r0.z, r0.y
  if_z r0.y
    mov r3.w, l(1.000000)
  endif
else
  mov r3.w, l(1.000000)
endif
dp4 r0.y, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.x, r0.y, r0.x
div r0.yzw, v7.xxyz, v7.wwww
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r2.xy, r2.ywyy, r2.xzxx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
min r0.w, r0.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r2.x
  mov_sat r2.xz, r1.xxyx
  eq r1.xy, r1.xyxx, r2.xzxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.x, l(1.000000)
  endif
else
  mov r3.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r2.y
  mov_sat r1.xy, r1.zwzz
  eq r1.xy, r1.zwzz, r1.xyxx
  and r1.x, r1.y, r1.x
  if_z r1.x
    mov r3.y, l(1.000000)
  endif
else
  mov r3.y, l(1.000000)
endif
mad r1.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.yzyz
mov_sat r2.xyzw, r1.xyzw
eq r2.xyzw, r1.xyzw, r2.xyzw
and r0.yz, r2.yywy, r2.xxzx
mad r1.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r3.z, r1.xyxx, t12.xxxx, s12, r0.w
if_nz r0.y
  mov_sat r2.xy, r1.xyxx
  eq r1.xy, r1.xyxx, r2.xyxx
  and r0.y, r1.y, r1.x
  if_z r0.y
    mov r3.z, l(1.000000)
  endif
else
  mov r3.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.w, r1.zwzz, t12.xxxx, s12, r0.w
if_nz r0.z
  mov_sat r0.yz, r1.zzwz
  eq r0.yz, r1.zzwz, r0.yyzy
  and r0.y, r0.z, r0.y
  if_z r0.y
    mov r3.w, l(1.000000)
  endif
else
  mov r3.w, l(1.000000)
endif
dp4 r0.y, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.y, r0.y, r0.x
and r0.z, l(8), cb13[0].x
mov r0.xw, l(1.000000,0,0,1.000000)
movc o0.xyw, r0.zzzz, r0.xyxw, r0.ywyw
mov_sat r0.x, v3.x
mul o0.z, r0.x, r0.x
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
