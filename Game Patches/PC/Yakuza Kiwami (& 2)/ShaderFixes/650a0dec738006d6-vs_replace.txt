//Cutscene haloing.
// ---- Created with 3Dmigoto v1.3.11 on Sat Aug 04 20:41:07 2018
cbuffer cb9 : register(b9)
{
  float4 cb9[6];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float4 o7 : TEXCOORD7,
  out float4 o8 : SV_POSITION0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.x = dot(cb12[0].xyzw, v0.xyzw);
  r0.y = dot(cb12[1].xyzw, v0.xyzw);
  r0.w = dot(cb12[3].xyzw, v0.xyzw);
  r1.xyz = float3(0.5,-0.5,0.5) * r0.xyw;
  o8.xyw = r0.xyw;
  o0.z = r0.w;
  
  o0.xy = r1.xy + r1.zz;
  o0.x+=stereo.x*(r0.w-stereo.y)*0.5;
  o1.xyz = v0.xyz;
  o2.xyzw = cb9[0].xyzw;
  o3.xyzw = cb9[1].xyzw;
  o4.xyzw = cb9[2].xyzw;
  o5.xyzw = cb9[3].xyzw;
  o6.xyzw = cb9[4].xyzw;
  o7.xyzw = cb9[5].xyzw;
  o8.z = dot(cb12[2].xyzw, v0.xyzw);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sat Aug 04 20:41:07 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xyzw        3     NONE   float   xyzw
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyzw        5     NONE   float   xyzw
// TEXCOORD                 6   xyzw        6     NONE   float   xyzw
// TEXCOORD                 7   xyzw        7     NONE   float   xyzw
// SV_POSITION              0   xyzw        8      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb12[4], immediateIndexed
dcl_constantbuffer cb9[6], immediateIndexed
dcl_input v0.xyzw
dcl_output o0.xyz
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyzw
dcl_output o7.xyzw
dcl_output_siv o8.xyzw, position
dcl_temps 2
dp4 r0.x, cb12[0].xyzw, v0.xyzw
dp4 r0.y, cb12[1].xyzw, v0.xyzw
dp4 r0.w, cb12[3].xyzw, v0.xyzw
mul r1.xyz, r0.xywx, l(0.500000, -0.500000, 0.500000, 0.000000)
mov o8.xyw, r0.xyxw
mov o0.z, r0.w
add o0.xy, r1.zzzz, r1.xyxx
mov o1.xyz, v0.xyzx
mov o2.xyzw, cb9[0].xyzw
mov o3.xyzw, cb9[1].xyzw
mov o4.xyzw, cb9[2].xyzw
mov o5.xyzw, cb9[3].xyzw
mov o6.xyzw, cb9[4].xyzw
mov o7.xyzw, cb9[5].xyzw
dp4 o8.z, cb12[2].xyzw, v0.xyzw
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
