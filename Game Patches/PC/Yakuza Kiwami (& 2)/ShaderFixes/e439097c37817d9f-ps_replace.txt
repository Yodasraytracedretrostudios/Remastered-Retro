//Water reflection PS in flashback cutscene (orphanage).
// ---- Created with 3Dmigoto v1.3.11 on Sat Aug 04 22:37:10 2018
Texture2D<float4> t3 : register(t3);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s3_s : register(s3);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb9 : register(b9)
{
  float4 cb9[16];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float3 v4 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.x = dot(v0.xyz, v0.xyz);
  r0.x = rsqrt(r0.x);
  r0.xyz = v0.xyz * r0.xxx;
  r0.w = dot(v4.xy, v4.xy);
  r0.w = rsqrt(r0.w);
  r1.xyzw = v4.xyxy * r0.wwww;
  r1.xyzw = v4.zzzz * r1.xyzw;
  r1.xyzw = r1.xyzw * cb9[15].xxyy + v3.xyxy;
  r1.xy = t2.Sample(s2_s, r1.xy).xy;
  r1.zw = t2.Sample(s2_s, r1.zw).xy;
  r1.zw = r1.zw + -r1.xy;
  r1.xy = cb9[15].xx * r1.zw + r1.xy;
  r1.xy = float2(-0.5,-0.5) + r1.xy;
  r1.yzw = cb9[13].xyz * r1.yyy;
  r1.xyz = cb9[12].xyz * r1.xxx + r1.yzw;
  r1.xyz = v1.xyz + r1.xyz;
  r0.w = dot(r1.xyz, r1.xyz);
  r0.w = rsqrt(r0.w);
  r1.xyz = r1.xyz * r0.www;
  r0.w = dot(r0.xyz, r1.xyz);
  r1.w = r0.w + r0.w;
  r0.xyz = r1.xyz * -r1.www + r0.xyz;
  r1.xyz = float3(64,64,64) * r0.xyz;
  r2.xyz = r0.xyz * float3(64,64,64) + v0.xyz;
  r1.w = dot(cb9[3].xyz, r2.xyz);
  r1.w = min(0, r1.w);
  r1.w = v2.x + -r1.w;
  r1.w = v2.x / r1.w;
  r2.w = dot(cb9[4].xyz, r2.xyz);
  r2.w = min(0, r2.w);
  r2.w = v2.y + -r2.w;
  r2.w = v2.y / r2.w;
  r1.w = min(r2.w, r1.w);
  r2.w = dot(cb9[5].xyz, r2.xyz);
  r2.w = min(0, r2.w);
  r2.w = v2.z + -r2.w;
  r2.x = dot(cb9[6].xyz, r2.xyz);
  r2.x = min(0, r2.x);
  r2.x = v2.w + -r2.x;
  r2.xw = v2.wz / r2.xw;
  r2.x = min(r2.w, r2.x);
  r1.w = min(r2.x, r1.w);
  r2.xyz = r1.xyz * r1.www;
  r0.w = 1 + -abs(r0.w);
  r0.w = log2(r0.w);
  r2.w = cb9[8].z * r0.w;
  r2.w = exp2(r2.w);
  r2.w = r2.w * cb9[8].y + cb9[8].x;
  r0.w = cb9[7].z * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * cb9[7].y + cb9[7].x;
  r1.xyzw = r1.xyzz * r1.wwww + v0.xyzz;
  r3.xyz = r1.www * float3(10,4.64158869,2.15443468) + -r2.zzz;
  r3.xyz = v0.zzz / r3.xyz;
  r4.xyz = r3.xxx * r2.xyz;
  r5.xyz = r2.xyz * r3.xxx + v0.xyz;
  r5.w = 1;
  r6.x = dot(cb9[0].xyzw, r5.xyzw);
  r6.y = dot(cb9[1].xyzw, r5.xyzw);
  r3.w = dot(cb9[2].xyzw, r5.xyzw);
  r6.x+=stereo.x*(r3.w-stereo.y)*0.5;
  r6.xy = r6.xy / r3.ww;
  r7.xyz = r2.xyz * r3.yyy + v0.xyz;
  r7.w = 1;
  r8.x = dot(cb9[0].xyzw, r7.xyzw);
  r8.y = dot(cb9[1].xyzw, r7.xyzw);
  r3.y = dot(cb9[2].xyzw, r7.xyzw);
  r8.x+=stereo.x*(r3.y-stereo.y)*0.5;
  r3.yw = r8.xy / r3.yy;
  r8.xyz = r2.xyz * r3.zzz + v0.xyz;
  r8.w = 1;
  r2.x = dot(cb9[0].xyzw, r8.xyzw);
  r2.y = dot(cb9[1].xyzw, r8.xyzw);
  r3.z = dot(cb9[2].xyzw, r8.xyzw);
  r2.x+=stereo.x*(r3.z-stereo.y)*0.5;
  r2.xy = r2.xy / r3.zz;
  r1.w = 1;
  r9.x = dot(cb9[0].xyzw, r1.xyzw);
  r9.y = dot(cb9[1].xyzw, r1.xyzw);
  r1.w = dot(cb9[2].xyzw, r1.xyzw);
  r9.x+=stereo.x*(r1.w-stereo.y)*0.5;
  r6.zw = r9.xy / r1.ww;
  r1.w = t0.Sample(s0_s, r6.xy).z;
  r1.w = sqrt(r1.w);
  r1.w = r1.w * -64 + 64.0750732;
  r3.y = t0.Sample(s0_s, r3.yw).z;
  r3.y = sqrt(r3.y);
  r3.y = r3.y * -64 + 64.0750732;
  r0.x = saturate(dot(r0.xyz, cb9[9].xyz));
  r0.x = log2(r0.x);
  r0.x = cb9[9].w * r0.x;
  r0.x = exp2(r0.x);
  r0.x = r0.x * r0.w;
  r9.xyz = cb9[10].xyz * r0.xxx;
  r0.y = cmp(r1.w < -r5.z);
  r0.z = 0.100000001 + -v0.z;
  r3.z = -v0.z + -r0.z;
  r2.z = r2.z * r3.x + r1.w;
  r0.z = r2.z + -r0.z;
  r0.z = r3.z / r0.z;
  r4.xyz = r0.zzz * r4.xyz + v0.xyz;
  r4.w = 1;
  r6.x = dot(cb9[0].xyzw, r4.xyzw);
  r6.y = dot(cb9[1].xyzw, r4.xyzw);
  r0.z = dot(cb9[2].xyzw, r4.xyzw);
  r6.x+=stereo.x*(r0.z-stereo.y)*0.5;
  r3.xz = r6.xy / r0.zz;
  r4.xyzw = t3.Sample(s3_s, r3.xz).xyzw;
  r3.xzw = t1.Sample(s1_s, r3.xz).xyz;
  r0.z = t0.Sample(s0_s, r2.xy).z;
  r0.z = sqrt(r0.z);
  r0.z = r0.z * -64 + 64.0750732;
  r2.x = -r5.z + -r1.w;
  r10.xyzw = r7.zxyz + -r5.zxyz;
  r2.y = r10.x + r3.y;
  r1.w = r2.y + -r1.w;
  r1.w = r2.x / r1.w;
  r5.xyz = r1.www * r10.yzw + r5.xyz;
  r5.w = 1;
  r2.x = dot(cb9[0].xyzw, r5.xyzw);
  r2.y = dot(cb9[1].xyzw, r5.xyzw);
  r1.w = dot(cb9[2].xyzw, r5.xyzw);
  r2.x+=stereo.x*(r1.w-stereo.y)*0.5;
  r2.xy = r2.xy / r1.ww;
  r5.xyzw = t3.Sample(s3_s, r2.xy).xyzw;
  r2.xyz = t1.Sample(s1_s, r2.xy).xyz;
  r1.w = t0.Sample(s0_s, r6.zw).z;
  r1.w = sqrt(r1.w);
  r1.w = r1.w * -64 + 64.0750732;
  r6.x = -r7.z + -r3.y;
  r10.xyzw = r8.zxyz + -r7.zxyz;
  r6.y = r10.x + r0.z;
  r6.y = r6.y + -r3.y;
  r6.x = r6.x / r6.y;
  r6.xyz = r6.xxx * r10.yzw + r7.xyz;
  r6.w = 1;
  r7.x = dot(cb9[0].xyzw, r6.xyzw);
  r7.y = dot(cb9[1].xyzw, r6.xyzw);
  r6.x = dot(cb9[2].xyzw, r6.xyzw);
  r7.x+=stereo.x*(r6.x-stereo.y)*0.5;
  r6.xy = r7.xy / r6.xx;
  r10.xyzw = t3.Sample(s3_s, r6.xy).xyzw;
  r6.xyz = t1.Sample(s1_s, r6.xy).xyz;
  r6.w = -r8.z + -r0.z;
  r11.xyzw = -r8.zxyz + r1.zxyz;
  r1.x = r11.x + r1.w;
  r1.x = r1.x + -r0.z;
  r1.x = r6.w / r1.x;
  r11.xyz = r1.xxx * r11.yzw + r8.xyz;
  r11.w = 1;
  r1.x = dot(cb9[0].xyzw, r11.xyzw);
  r1.y = dot(cb9[1].xyzw, r11.xyzw);
  r6.w = dot(cb9[2].xyzw, r11.xyzw);
  r1.x+=stereo.x*(r6.w-stereo.y)*0.5;
  r1.xy = r1.xy / r6.ww;
  r11.xyzw = t3.Sample(s3_s, r1.xy).xyzw;
  r7.xyw = t1.Sample(s1_s, r1.xy).xyz;
  if (r0.y != 0) {
    r3.xzw = r3.xzw * r0.www;
    r3.xzw = r4.xyz * r2.www + r3.xzw;
    r3.xzw = -cb9[10].xyz * r0.xxx + r3.xzw;
    r9.xyz = r4.www * r3.xzw + r9.xyz;
  } else {
    r0.y = cmp(r3.y < -r7.z);
    if (r0.y != 0) {
      r2.xyz = r2.xyz * r0.www;
      r2.xyz = r5.xyz * r2.www + r2.xyz;
      r2.xyz = -cb9[10].xyz * r0.xxx + r2.xyz;
      r9.xyz = r5.www * r2.xyz + r9.xyz;
    } else {
      r0.y = cmp(r0.z < -r8.z);
      if (r0.y != 0) {
        r2.xyz = r6.xyz * r0.www;
        r2.xyz = r10.xyz * r2.www + r2.xyz;
        r2.xyz = -cb9[10].xyz * r0.xxx + r2.xyz;
        r9.xyz = r10.www * r2.xyz + r9.xyz;
      } else {
        r0.y = cmp(r1.w < -r1.z);
        if (r0.y != 0) {
          r0.yzw = r7.xyw * r0.www;
          r0.yzw = r11.xyz * r2.www + r0.yzw;
          r0.xyz = -cb9[10].xyz * r0.xxx + r0.yzw;
          r9.xyz = r11.www * r0.xyz + r9.xyz;
        }
      }
    }
  }
  r9.w = cb9[8].w;
  o0.xyzw = r9.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sat Aug 04 22:37:10 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyz         0     NONE   float   xyz
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyzw
// TEXCOORD                 3   xy          3     NONE   float   xy
// TEXCOORD                 5   xyz         4     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb9[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps linear v0.xyz
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v3.xy
dcl_input_ps linear v4.xyz
dcl_output o0.xyzw
dcl_temps 12
dp3 r0.x, v0.xyzx, v0.xyzx
rsq r0.x, r0.x
mul r0.xyz, r0.xxxx, v0.xyzx
dp2 r0.w, v4.xyxx, v4.xyxx
rsq r0.w, r0.w
mul r1.xyzw, r0.wwww, v4.xyxy
mul r1.xyzw, r1.xyzw, v4.zzzz
mad r1.xyzw, r1.xyzw, cb9[15].xxyy, v3.xyxy
sample_indexable(texture2d)(float,float,float,float) r1.xy, r1.xyxx, t2.xyzw, s2
sample_indexable(texture2d)(float,float,float,float) r1.zw, r1.zwzz, t2.zwxy, s2
add r1.zw, -r1.xxxy, r1.zzzw
mad r1.xy, cb9[15].xxxx, r1.zwzz, r1.xyxx
add r1.xy, r1.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r1.yzw, r1.yyyy, cb9[13].xxyz
mad r1.xyz, cb9[12].xyzx, r1.xxxx, r1.yzwy
add r1.xyz, r1.xyzx, v1.xyzx
dp3 r0.w, r1.xyzx, r1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, r1.xyzx
dp3 r0.w, r0.xyzx, r1.xyzx
add r1.w, r0.w, r0.w
mad r0.xyz, r1.xyzx, -r1.wwww, r0.xyzx
mul r1.xyz, r0.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000)
mad r2.xyz, r0.xyzx, l(64.000000, 64.000000, 64.000000, 0.000000), v0.xyzx
dp3 r1.w, cb9[3].xyzx, r2.xyzx
min r1.w, r1.w, l(0.000000)
add r1.w, -r1.w, v2.x
div r1.w, v2.x, r1.w
dp3 r2.w, cb9[4].xyzx, r2.xyzx
min r2.w, r2.w, l(0.000000)
add r2.w, -r2.w, v2.y
div r2.w, v2.y, r2.w
min r1.w, r1.w, r2.w
dp3 r2.w, cb9[5].xyzx, r2.xyzx
min r2.w, r2.w, l(0.000000)
add r2.w, -r2.w, v2.z
dp3 r2.x, cb9[6].xyzx, r2.xyzx
min r2.x, r2.x, l(0.000000)
add r2.x, -r2.x, v2.w
div r2.xw, v2.wwwz, r2.xxxw
min r2.x, r2.x, r2.w
min r1.w, r1.w, r2.x
mul r2.xyz, r1.wwww, r1.xyzx
add r0.w, -|r0.w|, l(1.000000)
log r0.w, r0.w
mul r2.w, r0.w, cb9[8].z
exp r2.w, r2.w
mad r2.w, r2.w, cb9[8].y, cb9[8].x
mul r0.w, r0.w, cb9[7].z
exp r0.w, r0.w
mad r0.w, r0.w, cb9[7].y, cb9[7].x
mad r1.xyzw, r1.xyzz, r1.wwww, v0.xyzz
mad r3.xyz, r1.wwww, l(10.000000, 4.64158869, 2.15443468, 0.000000), -r2.zzzz
div r3.xyz, v0.zzzz, r3.xyzx
mul r4.xyz, r2.xyzx, r3.xxxx
mad r5.xyz, r2.xyzx, r3.xxxx, v0.xyzx
mov r5.w, l(1.000000)
dp4 r6.x, cb9[0].xyzw, r5.xyzw
dp4 r6.y, cb9[1].xyzw, r5.xyzw
dp4 r3.w, cb9[2].xyzw, r5.xyzw
div r6.xy, r6.xyxx, r3.wwww
mad r7.xyz, r2.xyzx, r3.yyyy, v0.xyzx
mov r7.w, l(1.000000)
dp4 r8.x, cb9[0].xyzw, r7.xyzw
dp4 r8.y, cb9[1].xyzw, r7.xyzw
dp4 r3.y, cb9[2].xyzw, r7.xyzw
div r3.yw, r8.xxxy, r3.yyyy
mad r8.xyz, r2.xyzx, r3.zzzz, v0.xyzx
mov r8.w, l(1.000000)
dp4 r2.x, cb9[0].xyzw, r8.xyzw
dp4 r2.y, cb9[1].xyzw, r8.xyzw
dp4 r3.z, cb9[2].xyzw, r8.xyzw
div r2.xy, r2.xyxx, r3.zzzz
mov r1.w, l(1.000000)
dp4 r9.x, cb9[0].xyzw, r1.xyzw
dp4 r9.y, cb9[1].xyzw, r1.xyzw
dp4 r1.w, cb9[2].xyzw, r1.xyzw
div r6.zw, r9.xxxy, r1.wwww
sample_indexable(texture2d)(float,float,float,float) r1.w, r6.xyxx, t0.xywz, s0
sqrt r1.w, r1.w
mad r1.w, r1.w, l(-64.000000), l(64.075073)
sample_indexable(texture2d)(float,float,float,float) r3.y, r3.ywyy, t0.xzyw, s0
sqrt r3.y, r3.y
mad r3.y, r3.y, l(-64.000000), l(64.075073)
dp3_sat r0.x, r0.xyzx, cb9[9].xyzx
log r0.x, r0.x
mul r0.x, r0.x, cb9[9].w
exp r0.x, r0.x
mul r0.x, r0.w, r0.x
mul r9.xyz, r0.xxxx, cb9[10].xyzx
lt r0.y, r1.w, -r5.z
add r0.z, -v0.z, l(0.100000)
add r3.z, -r0.z, -v0.z
mad r2.z, r2.z, r3.x, r1.w
add r0.z, -r0.z, r2.z
div r0.z, r3.z, r0.z
mad r4.xyz, r0.zzzz, r4.xyzx, v0.xyzx
mov r4.w, l(1.000000)
dp4 r6.x, cb9[0].xyzw, r4.xyzw
dp4 r6.y, cb9[1].xyzw, r4.xyzw
dp4 r0.z, cb9[2].xyzw, r4.xyzw
div r3.xz, r6.xxyx, r0.zzzz
sample_indexable(texture2d)(float,float,float,float) r4.xyzw, r3.xzxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r3.xzw, r3.xzxx, t1.xwyz, s1
sample_indexable(texture2d)(float,float,float,float) r0.z, r2.xyxx, t0.xyzw, s0
sqrt r0.z, r0.z
mad r0.z, r0.z, l(-64.000000), l(64.075073)
add r2.x, -r1.w, -r5.z
add r10.xyzw, -r5.zxyz, r7.zxyz
add r2.y, r3.y, r10.x
add r1.w, -r1.w, r2.y
div r1.w, r2.x, r1.w
mad r5.xyz, r1.wwww, r10.yzwy, r5.xyzx
mov r5.w, l(1.000000)
dp4 r2.x, cb9[0].xyzw, r5.xyzw
dp4 r2.y, cb9[1].xyzw, r5.xyzw
dp4 r1.w, cb9[2].xyzw, r5.xyzw
div r2.xy, r2.xyxx, r1.wwww
sample_indexable(texture2d)(float,float,float,float) r5.xyzw, r2.xyxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r2.xyz, r2.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.w, r6.zwzz, t0.xywz, s0
sqrt r1.w, r1.w
mad r1.w, r1.w, l(-64.000000), l(64.075073)
add r6.x, -r3.y, -r7.z
add r10.xyzw, -r7.zxyz, r8.zxyz
add r6.y, r0.z, r10.x
add r6.y, -r3.y, r6.y
div r6.x, r6.x, r6.y
mad r6.xyz, r6.xxxx, r10.yzwy, r7.xyzx
mov r6.w, l(1.000000)
dp4 r7.x, cb9[0].xyzw, r6.xyzw
dp4 r7.y, cb9[1].xyzw, r6.xyzw
dp4 r6.x, cb9[2].xyzw, r6.xyzw
div r6.xy, r7.xyxx, r6.xxxx
sample_indexable(texture2d)(float,float,float,float) r10.xyzw, r6.xyxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xyxx, t1.xyzw, s1
add r6.w, -r0.z, -r8.z
add r11.xyzw, r1.zxyz, -r8.zxyz
add r1.x, r1.w, r11.x
add r1.x, -r0.z, r1.x
div r1.x, r6.w, r1.x
mad r11.xyz, r1.xxxx, r11.yzwy, r8.xyzx
mov r11.w, l(1.000000)
dp4 r1.x, cb9[0].xyzw, r11.xyzw
dp4 r1.y, cb9[1].xyzw, r11.xyzw
dp4 r6.w, cb9[2].xyzw, r11.xyzw
div r1.xy, r1.xyxx, r6.wwww
sample_indexable(texture2d)(float,float,float,float) r11.xyzw, r1.xyxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r7.xyw, r1.xyxx, t1.xywz, s1
if_nz r0.y
  mul r3.xzw, r0.wwww, r3.xxzw
  mad r3.xzw, r4.xxyz, r2.wwww, r3.xxzw
  mad r3.xzw, -cb9[10].xxyz, r0.xxxx, r3.xxzw
  mad r9.xyz, r4.wwww, r3.xzwx, r9.xyzx
else
  lt r0.y, r3.y, -r7.z
  if_nz r0.y
    mul r2.xyz, r0.wwww, r2.xyzx
    mad r2.xyz, r5.xyzx, r2.wwww, r2.xyzx
    mad r2.xyz, -cb9[10].xyzx, r0.xxxx, r2.xyzx
    mad r9.xyz, r5.wwww, r2.xyzx, r9.xyzx
  else
    lt r0.y, r0.z, -r8.z
    if_nz r0.y
      mul r2.xyz, r0.wwww, r6.xyzx
      mad r2.xyz, r10.xyzx, r2.wwww, r2.xyzx
      mad r2.xyz, -cb9[10].xyzx, r0.xxxx, r2.xyzx
      mad r9.xyz, r10.wwww, r2.xyzx, r9.xyzx
    else
      lt r0.y, r1.w, -r1.z
      if_nz r0.y
        mul r0.yzw, r0.wwww, r7.xxyw
        mad r0.yzw, r11.xxyz, r2.wwww, r0.yyzw
        mad r0.xyz, -cb9[10].xyzx, r0.xxxx, r0.yzwy
        mad r9.xyz, r11.wwww, r0.xyzx, r9.xyzx
      endif
    endif
  endif
endif
mov r9.w, cb9[8].w
mov o0.xyzw, r9.xyzw
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
