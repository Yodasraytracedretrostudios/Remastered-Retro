//Water reflection chapter 3.
// ---- Created with 3Dmigoto v1.3.11 on Mon Aug 06 17:31:54 2018
Texture2D<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb9 : register(b9)
{
  float4 cb9[13];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float4 v5 : TEXCOORD5,
  float4 v6 : TEXCOORD6,
  float3 v7 : TEXCOORD7,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.x = dot(v4.xy, v4.xy);
  r0.x = rsqrt(r0.x);
  r0.xyzw = v4.xyxy * r0.xxxx;
  r0.xyzw = v4.zzzz * r0.xyzw;
  r0.xyzw = r0.xyzw * v0.zzww + v0.xyxy;
  r1.xyz = t3.Sample(s3_s, r0.zw).xyw;
  r0.xyz = t3.Sample(s3_s, r0.xy).xyw;
  r1.xyz = r1.xyz + -r0.xyz;
  r0.xyz = v0.zzz * r1.xyz + r0.xyz;
  
  //v2-=stereo.x*(v2.z-stereo.y)*0.5;
  
  r1.xy = v2.xy / v2.zz;
  //r1.x+=stereo.x*(r0.w-stereo.y)*0.5;
  r0.w = t0.Sample(s0_s, r1.xy).x;
  r0.w = cb9[0].x + r0.w;
  r0.w = -cb9[0].y / r0.w;
  r0.w = -v1.z + r0.w;
  r1.z = dot(v1.xyz, v1.xyz);
  r1.z = rsqrt(r1.z);
  r2.xyz = v1.xyz * r1.zzz;
  r0.w = r0.w / r2.z;
  r1.z = cb9[9].y + -cb9[9].x;
  r1.w = dot(v3.xyz, v3.xyz);
  r1.w = rsqrt(r1.w);
  r3.xyz = v3.xyz * r1.www;
  r1.w = dot(r2.xyz, r3.xyz);
  r1.z = -r1.w * r1.z + cb9[9].x;
  r0.w = r0.z * r1.z + r0.w;
  r1.z = cmp(r0.w < 0);
  if (r1.z != 0) discard;
  r1.z = dot(v5.xyz, v5.xyz);
  r1.z = rsqrt(r1.z);
  r4.xyz = v5.xyz * r1.zzz;
  r5.xyz = r4.zxy * r3.yzx;
  r5.xyz = r4.yzx * r3.zxy + -r5.xyz;
  r1.z = dot(r5.xyz, r5.xyz);
  r1.z = rsqrt(r1.z);
  r5.xyz = r5.xyz * r1.zzz;
  r0.xy = float2(-0.5,-0.5) + r0.xy;
  r6.xy = cb9[9].zz * r0.xy;
  r4.xyz = r4.xyz * r6.xxx + r3.xyz;
  r4.xyz = r5.xyz * r6.yyy + r4.xyz;
  r1.z = dot(r4.xyz, r4.xyz);
  r1.z = rsqrt(r1.z);
  r4.xyz = r4.xyz * r1.zzz;
  r1.z = dot(r3.xyz, r4.xyz);
  r2.w = dot(r4.xyz, r2.xyz);
  r2.x = dot(r2.xyz, cb9[1].xyz);
  r2.x = r2.x * r2.x + 1;
  r2.y = dot(r3.xyz, cb9[1].xyz);
  r2.z = r2.w * r1.w;
  r1.z = r2.z * r1.z;
  r2.z = r1.w * r1.w;
  r2.z = r2.w * r2.w + r2.z;
  r2.w = 1 + r2.w;
  r2.w = log2(r2.w);
  r2.w = cb9[7].z * r2.w;
  r2.w = exp2(r2.w);
  r2.z = -r2.z * 2 + 1;
  r1.z = saturate(r1.z * 4 + r2.z);
  r2.z = -v1.z * cb9[12].y + 1;
  r2.z = cb9[12].x / r2.z;
  r3.xy = r0.xy * r2.zz + r1.xy;
  r0.xy = r0.xy * r0.ww;
  r0.xy = r0.xy * cb9[9].ww + r1.xy;
  r4.xyz = t1.Sample(s1_s, r0.xy).xyz;
  r3.xyz = t4.Sample(s4_s, r3.xy).xyz;
  r1.xyz = r3.xyz * r1.zzz;
  r0.x = cb9[7].y + -cb9[7].x;
  r0.x = r2.w * r0.x + cb9[7].x;
  r1.xyz = r1.xyz * r0.xxx;
  r0.x = r1.w * r0.w;
  r0.x = r0.x / r2.y;
  r0.y = r0.x / r0.w;
  r0.x = r0.w + r0.x;
  r0.y = 1 + r0.y;
  r2.yzw = log2(cb9[2].xyz);
  r2.yzw = r2.yzw * r0.xxx;
  r2.yzw = exp2(r2.yzw);
  r3.xyz = float3(-1,-1,-1) + r2.yzw;
  r3.xyz = cb9[3].xyz * r3.xyz;
  r3.xyz = r3.xyz / r0.yyy;
  r1.xyz = r3.xyz * r2.xxx + r1.xyz;
  r1.xyz = v4.www * r1.xyz;
  r1.xyz = r4.xyz * r2.yzw + r1.xyz;
  r0.xy = cb9[8].yw + -cb9[8].xz;
  r0.x = -r1.w * r0.x + cb9[8].x;
  r0.y = 1 / r0.y;
  r0.x = r0.w * r0.x + 1;
  r0.x = saturate(r0.x * r0.z);
  r0.z = -cb9[8].z + r0.x;
  r0.y = saturate(r0.z * r0.y);
  r0.z = r0.y * -2 + 3;
  r0.y = r0.y * r0.y;
  r0.y = r0.z * r0.y;
  r2.xyz = cb9[11].xyz + -cb9[10].xyz;
  r0.yzw = r0.yyy * r2.xyz + cb9[10].xyz;
  r0.yzw = r0.yzw * r0.xxx;
  r0.x = 1 + -r0.x;
  r0.xyz = r1.xyz * r0.xxx + r0.yzw;
  r1.xyz = r0.xyz * v6.xyz + v7.xyz;
  r0.w = 4 & asint(cb13[0].x);
  o0.xyz = r0.www ? r1.xyz : r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Mon Aug 06 17:31:54 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyz         3     NONE   float   xyz
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyz         6     NONE   float   xyz
// TEXCOORD                 7   xyz         7     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb9[13], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texture2d (float,float,float,float) t4
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyzw
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_input_ps linear v7.xyz
dcl_output o0.xyzw
dcl_temps 7
dp2 r0.x, v4.xyxx, v4.xyxx
rsq r0.x, r0.x
mul r0.xyzw, r0.xxxx, v4.xyxy
mul r0.xyzw, r0.xyzw, v4.zzzz
mad r0.xyzw, r0.xyzw, v0.zzww, v0.xyxy
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.zwzz, t3.xywz, s3
sample_indexable(texture2d)(float,float,float,float) r0.xyz, r0.xyxx, t3.xywz, s3
add r1.xyz, -r0.xyzx, r1.xyzx
mad r0.xyz, v0.zzzz, r1.xyzx, r0.xyzx
div r1.xy, v2.xyxx, v2.zzzz
sample_indexable(texture2d)(float,float,float,float) r0.w, r1.xyxx, t0.yzwx, s0
add r0.w, r0.w, cb9[0].x
div r0.w, -cb9[0].y, r0.w
add r0.w, r0.w, -v1.z
dp3 r1.z, v1.xyzx, v1.xyzx
rsq r1.z, r1.z
mul r2.xyz, r1.zzzz, v1.xyzx
div r0.w, r0.w, r2.z
add r1.z, -cb9[9].x, cb9[9].y
dp3 r1.w, v3.xyzx, v3.xyzx
rsq r1.w, r1.w
mul r3.xyz, r1.wwww, v3.xyzx
dp3 r1.w, r2.xyzx, r3.xyzx
mad r1.z, -r1.w, r1.z, cb9[9].x
mad r0.w, r0.z, r1.z, r0.w
lt r1.z, r0.w, l(0.000000)
discard_nz r1.z
dp3 r1.z, v5.xyzx, v5.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, v5.xyzx
mul r5.xyz, r3.yzxy, r4.zxyz
mad r5.xyz, r4.yzxy, r3.zxyz, -r5.xyzx
dp3 r1.z, r5.xyzx, r5.xyzx
rsq r1.z, r1.z
mul r5.xyz, r1.zzzz, r5.xyzx
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
mul r6.xy, r0.xyxx, cb9[9].zzzz
mad r4.xyz, r4.xyzx, r6.xxxx, r3.xyzx
mad r4.xyz, r5.xyzx, r6.yyyy, r4.xyzx
dp3 r1.z, r4.xyzx, r4.xyzx
rsq r1.z, r1.z
mul r4.xyz, r1.zzzz, r4.xyzx
dp3 r1.z, r3.xyzx, r4.xyzx
dp3 r2.w, r4.xyzx, r2.xyzx
dp3 r2.x, r2.xyzx, cb9[1].xyzx
mad r2.x, r2.x, r2.x, l(1.000000)
dp3 r2.y, r3.xyzx, cb9[1].xyzx
mul r2.z, r1.w, r2.w
mul r1.z, r1.z, r2.z
mul r2.z, r1.w, r1.w
mad r2.z, r2.w, r2.w, r2.z
add r2.w, r2.w, l(1.000000)
log r2.w, r2.w
mul r2.w, r2.w, cb9[7].z
exp r2.w, r2.w
mad r2.z, -r2.z, l(2.000000), l(1.000000)
mad_sat r1.z, r1.z, l(4.000000), r2.z
mad r2.z, -v1.z, cb9[12].y, l(1.000000)
div r2.z, cb9[12].x, r2.z
mad r3.xy, r0.xyxx, r2.zzzz, r1.xyxx
mul r0.xy, r0.wwww, r0.xyxx
mad r0.xy, r0.xyxx, cb9[9].wwww, r1.xyxx
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r0.xyxx, t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t4.xyzw, s4
mul r1.xyz, r1.zzzz, r3.xyzx
add r0.x, -cb9[7].x, cb9[7].y
mad r0.x, r2.w, r0.x, cb9[7].x
mul r1.xyz, r0.xxxx, r1.xyzx
mul r0.x, r0.w, r1.w
div r0.x, r0.x, r2.y
div r0.y, r0.x, r0.w
add r0.x, r0.x, r0.w
add r0.y, r0.y, l(1.000000)
log r2.yzw, cb9[2].xxyz
mul r2.yzw, r0.xxxx, r2.yyzw
exp r2.yzw, r2.yyzw
add r3.xyz, r2.yzwy, l(-1.000000, -1.000000, -1.000000, 0.000000)
mul r3.xyz, r3.xyzx, cb9[3].xyzx
div r3.xyz, r3.xyzx, r0.yyyy
mad r1.xyz, r3.xyzx, r2.xxxx, r1.xyzx
mul r1.xyz, r1.xyzx, v4.wwww
mad r1.xyz, r4.xyzx, r2.yzwy, r1.xyzx
add r0.xy, -cb9[8].xzxx, cb9[8].ywyy
mad r0.x, -r1.w, r0.x, cb9[8].x
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r0.y
mad r0.x, r0.w, r0.x, l(1.000000)
mul_sat r0.x, r0.z, r0.x
add r0.z, r0.x, -cb9[8].z
mul_sat r0.y, r0.y, r0.z
mad r0.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.z
add r2.xyz, -cb9[10].xyzx, cb9[11].xyzx
mad r0.yzw, r0.yyyy, r2.xxyz, cb9[10].xxyz
mul r0.yzw, r0.xxxx, r0.yyzw
add r0.x, -r0.x, l(1.000000)
mad r0.xyz, r1.xyzx, r0.xxxx, r0.yzwy
mad r1.xyz, r0.xyzx, v6.xyzx, v7.xyzx
and r0.w, l(4), cb13[0].x
movc o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
