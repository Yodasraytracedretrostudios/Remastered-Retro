//Haloing from shader cache, and specular.
// ---- Created with 3Dmigoto v1.3.16 on Thu Jan 28 23:38:49 2021
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb11 : register(b11)
{
  float4 cb11[1];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[16];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[26];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float3 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.xy = t3.Sample(s3_s, v1.xy).yw;
  r0.z = t5.Sample(s5_s, v1.zw).w;
  r0.z = 0.200000003 * r0.z;
  r0.x = r0.x * 0.800000012 + r0.z;
  r0.x = cmp(r0.y < r0.x);
  r0.x = r0.x ? 0 : r0.y;
  r1.w = 1 + -r0.x;
  r0.y = cmp(0.0274509806 >= r1.w);
  r2.xyz = t0.Sample(s0_s, v1.xy).xyz;
  r2.xyz = float3(-0.5,-0.5,-0.5) + r2.xyz;
  r0.z = dot(r2.xyz, r2.xyz);
  r0.z = rsqrt(r0.z);
  r2.xyz = r2.xyz * r0.zzz;
  r3.x = dot(cb5[5].xyz, r2.xyz);
  r3.y = dot(cb5[6].xyz, r2.xyz);
  r3.z = dot(cb5[7].xyz, r2.xyz);
  r0.z = dot(v3.xyz, v3.xyz);
  r0.z = rsqrt(r0.z);
  r4.xyz = v3.xyz * r0.zzz;
  r0.z = dot(r4.xyz, r3.xyz);
  
  //v6.xyz-=stereo.x*stereo.y*cb5[5].xyz/cb13[12].x;
  
  r0.w = dot(v6.xyz, v6.xyz);
  r3.xy = r3.xy * float2(0.200000003,-0.200000003) + v2.xy;
  
  r3.x+=stereo.x*(v2.z-stereo.y)*0.5;
  
  r3.xy = r3.xy / v2.zz;
  r3.xyz = t1.Sample(s1_s, r3.xy).xyz;
  r2.w = cb5[10].y * r1.w;
  r2.w = -cb5[13].z * r2.w;
  r4.xyz = t6.Sample(s6_s, r2.ww).xyz;
  r0.w = rsqrt(r0.w);
  r5.xyz = v6.xyz * r0.www;
  r0.w = dot(r5.xyz, r2.xyz);
  r0.w = r0.w + r0.w;
  r2.xyz = r2.xyz * -r0.www + r5.xyz;
  r2.w = abs(r2.y);
  r2.xyz = float3(-1,-1,1) * r2.xwz;
  r2.xyz = t4.Sample(s4_s, r2.xyz).xyz;
  r0.w = -r0.z;
  r0.w = t6.Sample(s6_s, r0.ww).w;
  r5.xy = v2.xy / v2.zz;
  r5.xyz = t1.Sample(s1_s, r5.xy).xyz;
  r2.w = cb5[10].y * -v3.z;
  r2.w = 0.5 * r2.w;
  r6.xyz = t6.Sample(s6_s, r2.ww).xyz;
  if (r0.y != 0) {
    r1.xyzw = float4(0,0,0,0);
  } else {
    r0.y = cmp(-0.600000024 < r0.z);
    if (r0.y != 0) {
      r3.xyz = float3(0,0,0);
    }
    r0.y = cmp(0 < r0.x);
    if (r0.y != 0) {
      r4.xyz = r4.xyz + -r3.xyz;
      r3.xyz = r0.xxx * r4.xyz + r3.xyz;
    }
    r0.y = dot(r2.xyz, cb5[15].xyz);
    r0.y = cb5[15].w + r0.y;
    r2.xyz = r2.xyz * r0.yyy;
    r0.yzw = r2.xyz * r0.www + r3.xyz;
    r2.x = cmp(cb5[14].x < r0.x);
    if (r2.x != 0) {
      r0.x = -cb5[14].x + r0.x;
      r0.x = saturate(cb5[14].y * r0.x);
      r2.xyz = r5.xyz * cb5[14].zzz + -r0.yzw;
      r0.yzw = r0.xxx * r2.xyz + r0.yzw;
    }
    r0.xyz = cb5[10].zzz * r0.yzw;
    r2.xyz = r0.xyz * r6.xyz;
    r0.w = dot(r2.xyz, float3(0.298909992,0.586610019,0.114480004));
    r2.x = saturate(3 * r0.w);
    r0.xyz = r0.xyz * r6.xyz + -r0.www;
    r0.xyz = r2.xxx * r0.xyz + r0.www;
    r0.w = 4 & asint(cb11[0].y);
    r2.xyz = r0.xyz * v4.xyz + v5.xyz;
    r1.xyz = r0.www ? r2.xyz : r0.xyz;
  }
  r0.x = cmp(0 < asuint(cb11[0].z));
  r0.y = asuint(cb11[0].z);
  r0.y = -r0.y * 0.00392156886 + r1.w;
  r0.y = cmp(r0.y < 0);
  r0.x = r0.x ? r0.y : 0;
  if (r0.x != 0) discard;
  o0.xyzw = r1.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Original ASM ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Thu Jan 28 23:38:49 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float   xyz
// TEXCOORD                 3   xyz         4     NONE   float   xyz
// TEXCOORD                 4   xyz         5     NONE   float   xyz
// TEXCOORD                 5   xyz         6     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[16], immediateIndexed
dcl_constantbuffer cb11[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_input_ps linear v6.xyz
dcl_output o0.xyzw
dcl_temps 7
sample_indexable(texture2d)(float,float,float,float) r0.xy, v1.xyxx, t3.ywxz, s3
sample_indexable(texture2d)(float,float,float,float) r0.z, v1.zwzz, t5.xywz, s5
mul r0.z, r0.z, l(0.200000)
mad r0.x, r0.x, l(0.800000), r0.z
lt r0.x, r0.y, r0.x
movc r0.x, r0.x, l(0), r0.y
add r1.w, -r0.x, l(1.000000)
ge r0.y, l(0.0274509806), r1.w
sample_indexable(texture2d)(float,float,float,float) r2.xyz, v1.xyxx, t0.xyzw, s0
add r2.xyz, r2.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.z, r2.xyzx, r2.xyzx
rsq r0.z, r0.z
mul r2.xyz, r0.zzzz, r2.xyzx
dp3 r3.x, cb5[5].xyzx, r2.xyzx
dp3 r3.y, cb5[6].xyzx, r2.xyzx
dp3 r3.z, cb5[7].xyzx, r2.xyzx
dp3 r0.z, v3.xyzx, v3.xyzx
rsq r0.z, r0.z
mul r4.xyz, r0.zzzz, v3.xyzx
dp3 r0.z, r4.xyzx, r3.xyzx
dp3 r0.w, v6.xyzx, v6.xyzx
mad r3.xy, r3.xyxx, l(0.200000, -0.200000, 0.000000, 0.000000), v2.xyxx
div r3.xy, r3.xyxx, v2.zzzz
sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.xyxx, t1.xyzw, s1
mul r2.w, r1.w, cb5[10].y
mul r2.w, r2.w, -cb5[13].z
sample_indexable(texture2d)(float,float,float,float) r4.xyz, r2.wwww, t6.xyzw, s6
rsq r0.w, r0.w
mul r5.xyz, r0.wwww, v6.xyzx
dp3 r0.w, r5.xyzx, r2.xyzx
add r0.w, r0.w, r0.w
mad r2.xyz, r2.xyzx, -r0.wwww, r5.xyzx
mov r2.w, |r2.y|
mul r2.xyz, r2.xwzx, l(-1.000000, -1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r2.xyz, r2.xyzx, t4.xyzw, s4
mov r0.w, -r0.z
sample_indexable(texture2d)(float,float,float,float) r0.w, r0.wwww, t6.xyzw, s6
div r5.xy, v2.xyxx, v2.zzzz
sample_indexable(texture2d)(float,float,float,float) r5.xyz, r5.xyxx, t1.xyzw, s1
mul r2.w, -v3.z, cb5[10].y
mul r2.w, r2.w, l(0.500000)
sample_indexable(texture2d)(float,float,float,float) r6.xyz, r2.wwww, t6.xyzw, s6
if_nz r0.y
  mov r1.xyzw, l(0,0,0,0)
else
  lt r0.y, l(-0.600000), r0.z
  if_nz r0.y
    mov r3.xyz, l(0,0,0,0)
  endif
  lt r0.y, l(0.000000), r0.x
  if_nz r0.y
    add r4.xyz, -r3.xyzx, r4.xyzx
    mad r3.xyz, r0.xxxx, r4.xyzx, r3.xyzx
  endif
  dp3 r0.y, r2.xyzx, cb5[15].xyzx
  add r0.y, r0.y, cb5[15].w
  mul r2.xyz, r0.yyyy, r2.xyzx
  mad r0.yzw, r2.xxyz, r0.wwww, r3.xxyz
  lt r2.x, cb5[14].x, r0.x
  if_nz r2.x
    add r0.x, r0.x, -cb5[14].x
    mul_sat r0.x, r0.x, cb5[14].y
    mad r2.xyz, r5.xyzx, cb5[14].zzzz, -r0.yzwy
    mad r0.yzw, r0.xxxx, r2.xxyz, r0.yyzw
  endif
  mul r0.xyz, r0.yzwy, cb5[10].zzzz
  mul r2.xyz, r6.xyzx, r0.xyzx
  dp3 r0.w, r2.xyzx, l(0.298910, 0.586610, 0.114480, 0.000000)
  mul_sat r2.x, r0.w, l(3.000000)
  mad r0.xyz, r0.xyzx, r6.xyzx, -r0.wwww
  mad r0.xyz, r2.xxxx, r0.xyzx, r0.wwww
  and r0.w, l(4), cb11[0].y
  mad r2.xyz, r0.xyzx, v4.xyzx, v5.xyzx
  movc r1.xyz, r0.wwww, r2.xyzx, r0.xyzx
endif
ult r0.x, l(0), cb11[0].z
utof r0.y, cb11[0].z
mad r0.y, -r0.y, l(0.00392156886), r1.w
lt r0.y, r0.y, l(0.000000)
and r0.x, r0.x, r0.y
discard_nz r0.x
mov o0.xyzw, r1.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
