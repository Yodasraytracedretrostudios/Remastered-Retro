//Underwater shadows.
// ---- Created with 3Dmigoto v1.3.16 on Sat Jan 30 12:55:39 2021
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb5 : register(b5)
{
  float4 cb5[9];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[14];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.xz = float2(0,0);
  r1.x = t0.Sample(s0_s, v1.xy).z;
  r1.y = sqrt(r1.x);
  r2.x = r1.y * -64 + 64;
  r0.yw = float2(0.25,0.5) / r2.xx;
  r0.xyzw = v1.xyxy + -r0.xyzw;
  r0.x = t0.Sample(s0_s, r0.xy).z;
  r0.y = t0.Sample(s0_s, r0.zw).z;
  r3.xy = sqrt(r0.xy);
  r2.yw = float2(64,1);
  r0.xy = r3.xy * float2(-64,-64) + r2.xy;
  r0.x = r0.y + r0.x;
  r0.x = 64 + r0.x;
  r0.x = 0.333333343 * r0.x;
  r2.x = -cb5[5].w;
  r2.y = -cb5[6].w;
  r2.z = -cb5[7].w;
  
  v2.x-=stereo.x/cb13[12].x;
  v2.x+=stereo.x*stereo.y/(r0.x*cb13[12].x);
  
  r0.yzw = v2.xyz * r0.xxx + r2.xyz;
  r2.xyz = v2.xyz * r0.xxx;
  r3.x = cb5[5].x;
  r3.y = cb5[6].x;
  r3.z = cb5[7].x;
  r3.x = dot(r3.xyz, r0.yzw);
  r4.x = cb5[5].z;
  r4.y = cb5[6].z;
  r4.z = cb5[7].z;
  r3.y = dot(r4.xyz, r0.yzw);
  r0.xy = r3.xy * float2(0.109999999,0.109999999) + v4.xy;
  r0.zw = float2(0.150000006,0.150000006) * r3.xy;
  r0.xy = t1.Sample(s1_s, r0.xy).xy;
  r0.xy = float2(-0.5,-0.5) + r0.xy;
  r1.y = dot(cb5[8].xyzw, r2.xyzw);
  r1.z = dot(r2.xyz, r2.xyz);
  r1.z = v2.w * r1.z;
  r1.x = saturate(r1.x / r1.z);
  r1.y = saturate(-r1.y);
  r1.y = r1.y * r1.y;
  r1.y = r1.y * 4 + 1;
  r1.y = 1 / r1.y;
  r0.xy = r0.xy * r1.yy + r0.zw;
  r0.z = r1.x * r1.y;
  r0.xy = t1.Sample(s1_s, r0.xy).xy;
  r0.xy = float2(-0.5,-0.5) + r0.xy;
  r0.x = dot(r0.xy, float2(3,3));
  o0.xyzw = r0.zzzz * r0.xxxx + float4(0.5,0.5,0.5,0.5);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Sat Jan 30 12:55:39 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float
// TEXCOORD                 3   xyzw        4     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyzw
dcl_input_ps linear v4.xy
dcl_output o0.xyzw
dcl_temps 5
mov r0.xz, l(0,0,0,0)
sample_indexable(texture2d)(float,float,float,float) r1.x, v1.xyxx, t0.zxyw, s0
sqrt r1.y, r1.x
mad r2.x, r1.y, l(-64.000000), l(64.000000)
div r0.yw, l(0.000000, 0.250000, 0.000000, 0.500000), r2.xxxx
add r0.xyzw, -r0.xyzw, v1.xyxy
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t0.zxyw, s0
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t0.xzyw, s0
sqrt r3.xy, r0.xyxx
mov r2.yw, l(0,64.000000,0,1.000000)
mad r0.xy, r3.xyxx, l(-64.000000, -64.000000, 0.000000, 0.000000), r2.xyxx
add r0.x, r0.x, r0.y
add r0.x, r0.x, l(64.000000)
mul r0.x, r0.x, l(0.333333343)
mov r2.x, -cb5[5].w
mov r2.y, -cb5[6].w
mov r2.z, -cb5[7].w
mad r0.yzw, v2.xxyz, r0.xxxx, r2.xxyz
mul r2.xyz, r0.xxxx, v2.xyzx
mov r3.x, cb5[5].x
mov r3.y, cb5[6].x
mov r3.z, cb5[7].x
dp3 r3.x, r3.xyzx, r0.yzwy
mov r4.x, cb5[5].z
mov r4.y, cb5[6].z
mov r4.z, cb5[7].z
dp3 r3.y, r4.xyzx, r0.yzwy
mad r0.xy, r3.xyxx, l(0.110000, 0.110000, 0.000000, 0.000000), v4.xyxx
mul r0.zw, r3.xxxy, l(0.000000, 0.000000, 0.150000, 0.150000)
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t1.xyzw, s1
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp4 r1.y, cb5[8].xyzw, r2.xyzw
dp3 r1.z, r2.xyzx, r2.xyzx
mul r1.z, r1.z, v2.w
div_sat r1.x, r1.x, r1.z
mov_sat r1.y, -r1.y
mul r1.y, r1.y, r1.y
mad r1.y, r1.y, l(4.000000), l(1.000000)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mad r0.xy, r0.xyxx, r1.yyyy, r0.zwzz
mul r0.z, r1.y, r1.x
sample_indexable(texture2d)(float,float,float,float) r0.xy, r0.xyxx, t1.xyzw, s1
add r0.xy, r0.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r0.x, r0.xyxx, l(3.000000, 3.000000, 0.000000, 0.000000)
mad o0.xyzw, r0.zzzz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.500000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
