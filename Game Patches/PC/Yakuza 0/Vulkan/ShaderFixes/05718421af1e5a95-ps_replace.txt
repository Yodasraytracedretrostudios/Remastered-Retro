// Club lights PS 2.
// ---- Created with 3Dmigoto v1.3.16 on Mon Feb 01 19:11:37 2021
TextureCube<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb11 : register(b11)
{
  float4 cb11[1];
}

cbuffer cb5 : register(b5)
{
  float4 cb5[9];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[14];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  
  r0.x = t0.Sample(s0_s, v1.xy).z;
  r0.x = sqrt(r0.x);
  r0.x = r0.x * -64 + 64;
  
  v2.x-=stereo.x/cb13[12].x;
  v2.x+=stereo.x*stereo.y/(r0.x*cb13[12].x);
  
  r0.y = dot(v2.xyz, v2.xyz);
  r0.z = sqrt(r0.y);
  r0.z = r0.x * r0.z;
  r0.y = rsqrt(r0.y);
  r1.xyz = v2.xyz * r0.yyy;
  r0.y = dot(cb5[0].xyz, r1.xyz);
  r0.w = max(0, r0.y);
  r0.w = min(r0.w, r0.z);
  r2.xyzw = float4(0.800000012,0.600000024,0.400000006,0.200000003) * r0.wwww;
  r1.w = dot(cb5[0].xyz, cb5[0].xyz);
  r0.y = r1.w / r0.y;
  r1.w = r1.z * r0.y;
  r3.xyz = -r1.xyz * r2.xxx + cb5[0].xyz;
  r4.xyz = -r1.xyz * r2.yyy + cb5[0].xyz;
  r2.xyz = -r1.xyz * r2.zzz + cb5[0].xyz;
  r5.xyz = -r1.xyz * r2.www + cb5[0].xyz;
  r2.w = dot(r3.xyz, r3.xyz);
  r6.x = sqrt(r2.w);
  r2.w = dot(r4.xyz, r4.xyz);
  r6.y = sqrt(r2.w);
  r2.w = dot(r2.xyz, r2.xyz);
  r6.z = sqrt(r2.w);
  r2.w = dot(r5.xyz, r5.xyz);
  r6.w = sqrt(r2.w);
  r3.xyz = r3.xyz / r6.xxx;
  r4.xyz = r4.xyz / r6.yyy;
  r2.xyz = r2.xyz / r6.zzz;
  r5.xyz = r5.xyz / r6.www;
  r7.xyz = cb5[4].xyz + r3.xyz;
  r8.xyz = cb5[4].xyz + r4.xyz;
  r9.xyz = cb5[4].xyz + r2.xyz;
  r10.xyz = cb5[4].xyz + r5.xyz;
  r11.x = dot(cb5[1].xyz, r7.xyz);
  r11.y = dot(cb5[2].xyz, r7.xyz);
  r11.z = dot(cb5[3].xyz, r7.xyz);
  r7.x = dot(cb5[1].xyz, r8.xyz);
  r7.y = dot(cb5[2].xyz, r8.xyz);
  r7.z = dot(cb5[3].xyz, r8.xyz);
  r8.x = dot(cb5[1].xyz, r9.xyz);
  r8.y = dot(cb5[2].xyz, r9.xyz);
  r8.z = dot(cb5[3].xyz, r9.xyz);
  r9.x = dot(cb5[1].xyz, r10.xyz);
  r9.y = dot(cb5[2].xyz, r10.xyz);
  r9.z = dot(cb5[3].xyz, r10.xyz);
  r10.xyz = float3(-1,1,1) * r11.xyz;
  r10.xyz = t2.Sample(s2_s, r10.xyz).xyz;
  r7.xyz = float3(-1,1,1) * r7.xyz;
  r7.xyz = t2.Sample(s2_s, r7.xyz).xyz;
  r8.xyz = float3(-1,1,1) * r8.xyz;
  r8.xyz = t2.Sample(s2_s, r8.xyz).xyz;
  r9.xyz = float3(-1,1,1) * r9.xyz;
  r9.xyz = t2.Sample(s2_s, r9.xyz).xyz;
  r6.xyzw = r6.xyzw * cb5[6].xxxx + float4(1,1,1,1);
  r10.xyz = r10.xyz / r6.xxx;
  r7.xyz = r7.xyz / r6.yyy;
  r6.xyz = r8.xyz / r6.zzz;
  r8.xyz = r9.xyz / r6.www;
  r3.x = dot(r3.xyz, r1.xyz);
  r3.y = dot(r4.xyz, r1.xyz);
  r3.z = dot(r2.xyz, r1.xyz);
  r3.w = dot(r5.xyz, r1.xyz);
  r2.xyzw = log2(abs(r3.xyzw));
  r2.xyzw = cb5[5].yyyy * r2.xyzw;
  r2.xyzw = exp2(r2.xyzw);
  r0.w = cb5[5].x * r0.w;
  r2.xyzw = r2.xyzw * r0.wwww;
  r3.xyz = r10.xyz * r2.xxx;
  r4.xyz = r7.xyz * r2.yyy;
  r2.xyz = r6.xyz * r2.zzz;
  r5.xyz = r8.xyz * r2.www;
  r2.xyz = float3(0.200000003,0.200000003,0.200000003) * r2.xyz;
  r2.xyz = r5.xyz * float3(0.100000001,0.100000001,0.100000001) + r2.xyz;
  r2.xyz = r4.xyz * float3(0.200000003,0.200000003,0.200000003) + r2.xyz;
  r2.xyz = r3.xyz * float3(0.200000003,0.200000003,0.200000003) + r2.xyz;
  r3.xyz = t1.Sample(s1_s, v1.zw).xyz;
  r3.xyz = r3.xyz * cb5[5].www + cb5[5].zzz;
  r2.xyz = r3.xyz * r0.zzz + r2.xyz;
  r0.z = cmp(r1.w < 0);
  r1.xyw = r1.xyz * r0.yyy + -cb5[0].xyz;
  r1.xyw = cb5[8].xyz + r1.xyw;
  r3.x = dot(cb5[1].xyz, r1.xyw);
  r3.y = dot(cb5[2].xyz, r1.xyw);
  r3.z = dot(cb5[3].xyz, r1.xyw);
  r3.xyz = float3(-1,1,1) * r3.xyz;
  r3.xyz = t2.Sample(s2_s, r3.xyz).xyz;
  if (r0.z != 0) {
    r0.x = r1.z * r0.y + r0.x;
    r0.x = saturate(1 + r0.x);
    r0.y = dot(r1.xyw, r1.xyw);
    r0.y = sqrt(r0.y);
    r0.y = r0.y * cb5[7].y + cb5[7].x;
    r0.x = r0.x * r0.y;
    r0.xyz = saturate(r3.xyz * r0.xxx);
    r2.xyz = r2.xyz + r0.xyz;
  }
  r2.w = dot(float3(1,1,1), r2.xyz);
  r0.x = cmp(0 < asuint(cb11[0].z));
  r0.y = asuint(cb11[0].z);
  r0.y = -r0.y * 0.00392156886 + r2.w;
  r0.y = cmp(r0.y < 0);
  r0.x = r0.x ? r0.y : 0;
  if (r0.x != 0) discard;
  o0.xyzw = r2.xyzw;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Feb 01 19:11:37 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 1   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb5[9], immediateIndexed
dcl_constantbuffer cb11[1], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texturecube (float,float,float,float) t2
dcl_input_ps linear v1.xyzw
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 12
sample_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t0.zxyw, s0
sqrt r0.x, r0.x
mad r0.x, r0.x, l(-64.000000), l(64.000000)
dp3 r0.y, v2.xyzx, v2.xyzx
sqrt r0.z, r0.y
mul r0.z, r0.z, r0.x
rsq r0.y, r0.y
mul r1.xyz, r0.yyyy, v2.xyzx
dp3 r0.y, cb5[0].xyzx, r1.xyzx
max r0.w, r0.y, l(0.000000)
min r0.w, r0.z, r0.w
mul r2.xyzw, r0.wwww, l(0.800000, 0.600000, 0.400000, 0.200000)
dp3 r1.w, cb5[0].xyzx, cb5[0].xyzx
div r0.y, r1.w, r0.y
mul r1.w, r0.y, r1.z
mad r3.xyz, -r1.xyzx, r2.xxxx, cb5[0].xyzx
mad r4.xyz, -r1.xyzx, r2.yyyy, cb5[0].xyzx
mad r2.xyz, -r1.xyzx, r2.zzzz, cb5[0].xyzx
mad r5.xyz, -r1.xyzx, r2.wwww, cb5[0].xyzx
dp3 r2.w, r3.xyzx, r3.xyzx
sqrt r6.x, r2.w
dp3 r2.w, r4.xyzx, r4.xyzx
sqrt r6.y, r2.w
dp3 r2.w, r2.xyzx, r2.xyzx
sqrt r6.z, r2.w
dp3 r2.w, r5.xyzx, r5.xyzx
sqrt r6.w, r2.w
div r3.xyz, r3.xyzx, r6.xxxx
div r4.xyz, r4.xyzx, r6.yyyy
div r2.xyz, r2.xyzx, r6.zzzz
div r5.xyz, r5.xyzx, r6.wwww
add r7.xyz, r3.xyzx, cb5[4].xyzx
add r8.xyz, r4.xyzx, cb5[4].xyzx
add r9.xyz, r2.xyzx, cb5[4].xyzx
add r10.xyz, r5.xyzx, cb5[4].xyzx
dp3 r11.x, cb5[1].xyzx, r7.xyzx
dp3 r11.y, cb5[2].xyzx, r7.xyzx
dp3 r11.z, cb5[3].xyzx, r7.xyzx
dp3 r7.x, cb5[1].xyzx, r8.xyzx
dp3 r7.y, cb5[2].xyzx, r8.xyzx
dp3 r7.z, cb5[3].xyzx, r8.xyzx
dp3 r8.x, cb5[1].xyzx, r9.xyzx
dp3 r8.y, cb5[2].xyzx, r9.xyzx
dp3 r8.z, cb5[3].xyzx, r9.xyzx
dp3 r9.x, cb5[1].xyzx, r10.xyzx
dp3 r9.y, cb5[2].xyzx, r10.xyzx
dp3 r9.z, cb5[3].xyzx, r10.xyzx
mul r10.xyz, r11.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r10.xyz, r10.xyzx, t2.xyzw, s2
mul r7.xyz, r7.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r7.xyz, r7.xyzx, t2.xyzw, s2
mul r8.xyz, r8.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r8.xyz, r8.xyzx, t2.xyzw, s2
mul r9.xyz, r9.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r9.xyz, r9.xyzx, t2.xyzw, s2
mad r6.xyzw, r6.xyzw, cb5[6].xxxx, l(1.000000, 1.000000, 1.000000, 1.000000)
div r10.xyz, r10.xyzx, r6.xxxx
div r7.xyz, r7.xyzx, r6.yyyy
div r6.xyz, r8.xyzx, r6.zzzz
div r8.xyz, r9.xyzx, r6.wwww
dp3 r3.x, r3.xyzx, r1.xyzx
dp3 r3.y, r4.xyzx, r1.xyzx
dp3 r3.z, r2.xyzx, r1.xyzx
dp3 r3.w, r5.xyzx, r1.xyzx
log r2.xyzw, |r3.xyzw|
mul r2.xyzw, r2.xyzw, cb5[5].yyyy
exp r2.xyzw, r2.xyzw
mul r0.w, r0.w, cb5[5].x
mul r2.xyzw, r0.wwww, r2.xyzw
mul r3.xyz, r2.xxxx, r10.xyzx
mul r4.xyz, r2.yyyy, r7.xyzx
mul r2.xyz, r2.zzzz, r6.xyzx
mul r5.xyz, r2.wwww, r8.xyzx
mul r2.xyz, r2.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000)
mad r2.xyz, r5.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r2.xyzx
mad r2.xyz, r4.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r2.xyzx
mad r2.xyz, r3.xyzx, l(0.200000, 0.200000, 0.200000, 0.000000), r2.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v1.zwzz, t1.xyzw, s1
mad r3.xyz, r3.xyzx, cb5[5].wwww, cb5[5].zzzz
mad r2.xyz, r3.xyzx, r0.zzzz, r2.xyzx
lt r0.z, r1.w, l(0.000000)
mad r1.xyw, r1.xyxz, r0.yyyy, -cb5[0].xyxz
add r1.xyw, r1.xyxw, cb5[8].xyxz
dp3 r3.x, cb5[1].xyzx, r1.xywx
dp3 r3.y, cb5[2].xyzx, r1.xywx
dp3 r3.z, cb5[3].xyzx, r1.xywx
mul r3.xyz, r3.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r3.xyz, r3.xyzx, t2.xyzw, s2
if_nz r0.z
  mad r0.x, r1.z, r0.y, r0.x
  add_sat r0.x, r0.x, l(1.000000)
  dp3 r0.y, r1.xywx, r1.xywx
  sqrt r0.y, r0.y
  mad r0.y, r0.y, cb5[7].y, cb5[7].x
  mul r0.x, r0.y, r0.x
  mul_sat r0.xyz, r0.xxxx, r3.xyzx
  add r2.xyz, r0.xyzx, r2.xyzx
endif
dp3 r2.w, l(1.000000, 1.000000, 1.000000, 0.000000), r2.xyzx
ult r0.x, l(0), cb11[0].z
utof r0.y, cb11[0].z
mad r0.y, -r0.y, l(0.00392156886), r2.w
lt r0.y, r0.y, l(0.000000)
and r0.x, r0.x, r0.y
discard_nz r0.x
mov o0.xyzw, r2.xyzw
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
