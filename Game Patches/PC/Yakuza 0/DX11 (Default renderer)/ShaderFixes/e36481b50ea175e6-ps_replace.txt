//Some lighting at screen depth 2.
// ---- Created with 3Dmigoto v1.3.11 on Fri Aug 03 17:35:59 2018
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[4];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[1];
}

cbuffer cb9 : register(b9)
{
  float4 cb9[1];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float4 v2 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  r0.x = t0.Sample(s0_s, v0.xy).x;
  r0.y = cmp(r0.x < cb2[0].z);
  r0.z = cmp(cb2[0].w < r0.x);
  r0.y = (int)r0.z | (int)r0.y;
  if (r0.y != 0) {
    if (-1 != 0) discard;
    o0.xyzw = float4(0,0,0,0);
  } else {
    r0.x = cb2[0].x + r0.x;
    r0.x = -cb2[0].y / r0.x;
	
    r1.xyzw = t1.Sample(s1_s, v0.xy).xyzw;
	
    r0.yzw = r1.xyz * float3(2.00787401,2.00787401,2.00787401) + float3(-1,-1,-1);
	//r0.y+=-stereo.x*1*-r0.w;
    r1.x = dot(r0.yzw, r0.yzw);
    r1.x = rsqrt(r1.x);
    r0.yzw = r1.xxx * r0.yzw;
    r1.x = 1 + -r1.w;
	
	v1.x-=stereo.x*0.5;
	
    r2.xyz = r0.xxx * v1.xyz + cb2[3].xyz;
	
	r2.x+=stereo.x*(1-stereo.y*r1.x*cb9[0].x)*1;
	
    r0.x = dot(r2.xyz, r2.xyz);
    r1.y = rsqrt(r0.x);
    r2.xyz = r2.xyz * r1.yyy;
    r0.x = cb2[3].w * r0.x;
    r0.x = 1 / r0.x;
    r0.x = saturate(r0.x * 2 + -1);
    r1.y = r1.w + -r1.x;
    r1.x = cb2[2].w * r1.y + r1.x;
    r1.x = saturate(r1.x + r1.x);
    r3.xyz = cb2[2].xyz * r0.xxx;
    r1.xyz = r3.xyz * r1.xxx;
    r0.x = saturate(dot(r2.xyz, r0.yzw));
    r0.xyz = r1.xyz * r0.xxx;
    r0.w = cmp(0 < r1.w);
    r0.w = r0.w ? 0.25 : 0.5;
    r1.xyz = r0.xyz * r0.www;
    r1.w = 0;
    r2.xy = int2(0,8192) & asint(cb13[0].xx);
    r3.xyz = float3(0.5,0.5,0.5) * r0.xyz;
    r3.w = 0;
    r0.xyz = cb1[0].zzz * r0.xyz;
    r0.w = 0;
    r0.xyzw = r2.yyyy ? r3.xyzw : r0.xyzw;
    o0.xyzw = r2.xxxx ? r1.xyzw : r0.xyzw;
  }
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Fri Aug 03 17:35:59 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// SV_POSITION              0   xyzw        2      POS   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb1[1], immediateIndexed
dcl_constantbuffer cb2[4], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_output o0.xyzw
dcl_temps 4
sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.xyzw, s0
lt r0.y, r0.x, cb2[0].z
lt r0.z, cb2[0].w, r0.x
or r0.y, r0.z, r0.y
if_nz r0.y
  discard_nz l(-1)
  mov o0.xyzw, l(0,0,0,0)
else
  add r0.x, r0.x, cb2[0].x
  div r0.x, -cb2[0].y, r0.x
  sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v0.xyxx, t1.xyzw, s1
  mad r0.yzw, r1.xxyz, l(0.000000, 2.007874, 2.007874, 2.007874), l(0.000000, -1.000000, -1.000000, -1.000000)
  dp3 r1.x, r0.yzwy, r0.yzwy
  rsq r1.x, r1.x
  mul r0.yzw, r0.yyzw, r1.xxxx
  add r1.x, -r1.w, l(1.000000)
  mad r2.xyz, r0.xxxx, v1.xyzx, cb2[3].xyzx
  dp3 r0.x, r2.xyzx, r2.xyzx
  rsq r1.y, r0.x
  mul r2.xyz, r1.yyyy, r2.xyzx
  mul r0.x, r0.x, cb2[3].w
  div r0.x, l(1.000000, 1.000000, 1.000000, 1.000000), r0.x
  mad_sat r0.x, r0.x, l(2.000000), l(-1.000000)
  add r1.y, -r1.x, r1.w
  mad r1.x, cb2[2].w, r1.y, r1.x
  add_sat r1.x, r1.x, r1.x
  mul r3.xyz, r0.xxxx, cb2[2].xyzx
  mul r1.xyz, r1.xxxx, r3.xyzx
  dp3_sat r0.x, r2.xyzx, r0.yzwy
  mul r0.xyz, r0.xxxx, r1.xyzx
  lt r0.w, l(0.000000), r1.w
  movc r0.w, r0.w, l(0.250000), l(0.500000)
  mul r1.xyz, r0.wwww, r0.xyzx
  mov r1.w, l(0)
  and r2.xy, l(0x00004000, 8192, 0, 0), cb13[0].xxxx
  mul r3.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  mov r3.w, l(0)
  mul r0.xyz, r0.xyzx, cb1[0].zzzz
  mov r0.w, l(0)
  movc r0.xyzw, r2.yyyy, r3.xyzw, r0.xyzw
  movc o0.xyzw, r2.xxxx, r1.xyzw, r0.xyzw
endif
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
