//Water reflections chapter 3 VS.
// ---- Created with 3Dmigoto v1.3.11 on Mon Aug 06 17:42:08 2018
cbuffer cb3 : register(b3)
{
  float4 cb3[7];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb9 : register(b9)
{
  float4 cb9[1];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}

cbuffer cb12 : register(b12)
{
  float4 cb12[31];
}

cbuffer cb10 : register(b10)
{
  float4 cb10[3];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : POSITION0,
  float4 v1 : NORMAL0,
  float4 v2 : TANGENT0,
  float4 v3 : COLOR0,
  float2 v4 : TEXCOORD0,
  out float4 o0 : TEXCOORD0,
  out float4 o1 : TEXCOORD1,
  out float4 o2 : TEXCOORD2,
  out float4 o3 : TEXCOORD3,
  out float4 o4 : TEXCOORD4,
  out float4 o5 : TEXCOORD5,
  out float4 o6 : TEXCOORD6,
  out float3 o7 : TEXCOORD7,
  out float4 o8 : SV_POSITION0)
{
  float4 r0,r1,r2,r3;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  
  o0.xy = v4.xy;
  o0.zw = cb9[0].xy;
  r0.w = v0.w;
  r0.x = dot(cb10[0].xyzw, v0.xyzw);
  r0.y = dot(cb10[1].xyzw, v0.xyzw);
  r0.z = dot(cb10[2].xyzw, v0.xyzw);
  o1.x = dot(cb12[4].xyzw, r0.xyzw);
  o1.y = dot(cb12[5].xyzw, r0.xyzw);
  o1.z = dot(cb12[6].xyzw, r0.xyzw);
  r1.x = dot(cb12[8].xyzw, r0.xyzw);
  r1.y = dot(cb12[9].xyzw, r0.xyzw);
  r1.w = dot(cb12[11].xyzw, r0.xyzw);
  o8.z = dot(cb12[10].xyzw, r0.xyzw);
  r0.xyz = -cb12[30].xyz + r0.xyz;
  r2.xyz = float3(0.5,-0.5,0.5) * r1.xyw;
  o8.xyw = r1.xyw;
  r2.x+=stereo.x*(r1.w-stereo.y)*0.5;
  o2.xy = r2.xy + r2.zz;
  o2.z = r1.w;
  r1.xyz = cb1[4].xyz * r1.www;
  r1.xyz = float3(1.44269502,1.44269502,1.44269502) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r2.xyz = v1.xyz * float3(2.00787401,2.00787401,2.00787401) + float3(-1,-1,-1);
  r3.x = dot(cb10[0].xyz, r2.xyz);
  r3.y = dot(cb10[1].xyz, r2.xyz);
  r3.z = dot(cb10[2].xyz, r2.xyz);
  o3.x = dot(cb12[4].xyz, r3.xyz);
  o3.y = dot(cb12[5].xyz, r3.xyz);
  o3.z = dot(cb12[6].xyz, r3.xyz);
  r2.xy = float2(-0.5,-0.5) + v3.xy;
  r0.w = dot(r2.xy, r2.xy);
  r1.w = rsqrt(r0.w);
  r0.w = sqrt(r0.w);
  o4.z = r0.w + r0.w;
  o4.xy = r2.xy * r1.ww;
  o4.w = v3.z;
  r2.xyz = v2.xyz * float3(2.00787401,2.00787401,2.00787401) + float3(-1,-1,-1);
  r3.x = dot(cb10[0].xyz, r2.xyz);
  r3.y = dot(cb10[1].xyz, r2.xyz);
  r3.z = dot(cb10[2].xyz, r2.xyz);
  o5.x = dot(cb12[4].xyz, r3.xyz);
  o5.y = dot(cb12[5].xyz, r3.xyz);
  o5.z = dot(cb12[6].xyz, r3.xyz);
  r0.w = 0x00008000 & asint(cb13[0].x);
  o6.xyz = r0.www ? r1.xyz : float3(1,1,1);
  r1.xyz = cb1[7].www + -r1.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r0.x = dot(r0.xyz, -cb3[6].xyz);
  r0.y = r0.x * r0.x + cb1[7].w;
  r0.x = cb1[6].w * r0.x + cb1[5].w;
  r0.x = rsqrt(r0.x);
  r0.z = r0.x * r0.x;
  r2.xyz = cb1[6].xyz * r0.zzz;
  r2.xyz = r2.xyz * r0.xxx;
  r0.xyz = cb1[5].xyz * r0.yyy + r2.xyz;
  r0.xyz = cb1[7].xyz * r0.xyz;
  r0.xyz = r0.xyz * r1.xyz;
  o7.xyz = r0.www ? r0.xyz : float3(0,0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Mon Aug 06 17:42:08 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz
// TANGENT                  0   xyzw        2     NONE   float   xyz
// COLOR                    0   xyzw        3     NONE   float   xyz
// TEXCOORD                 0   xy          4     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyz         2     NONE   float   xyz
// TEXCOORD                 3   xyz         3     NONE   float   xyz
// TEXCOORD                 4   xyzw        4     NONE   float   xyzw
// TEXCOORD                 5   xyz         5     NONE   float   xyz
// TEXCOORD                 6   xyz         6     NONE   float   xyz
// TEXCOORD                 7   xyz         7     NONE   float   xyz
// SV_POSITION              0   xyzw        8      POS   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb10[3], immediateIndexed
dcl_constantbuffer cb12[31], immediateIndexed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb9[1], immediateIndexed
dcl_constantbuffer cb1[8], immediateIndexed
dcl_constantbuffer cb3[7], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xyz
dcl_input v3.xyz
dcl_input v4.xy
dcl_output o0.xyzw
dcl_output o1.xyz
dcl_output o2.xyz
dcl_output o3.xyz
dcl_output o4.xyzw
dcl_output o5.xyz
dcl_output o6.xyz
dcl_output o7.xyz
dcl_output_siv o8.xyzw, position
dcl_temps 4
mov o0.xy, v4.xyxx
mov o0.zw, cb9[0].xxxy
mov r0.w, v0.w
dp4 r0.x, cb10[0].xyzw, v0.xyzw
dp4 r0.y, cb10[1].xyzw, v0.xyzw
dp4 r0.z, cb10[2].xyzw, v0.xyzw
dp4 o1.x, cb12[4].xyzw, r0.xyzw
dp4 o1.y, cb12[5].xyzw, r0.xyzw
dp4 o1.z, cb12[6].xyzw, r0.xyzw
dp4 r1.x, cb12[8].xyzw, r0.xyzw
dp4 r1.y, cb12[9].xyzw, r0.xyzw
dp4 r1.w, cb12[11].xyzw, r0.xyzw
dp4 o8.z, cb12[10].xyzw, r0.xyzw
add r0.xyz, r0.xyzx, -cb12[30].xyzx
mul r2.xyz, r1.xywx, l(0.500000, -0.500000, 0.500000, 0.000000)
mov o8.xyw, r1.xyxw
add o2.xy, r2.zzzz, r2.xyxx
mov o2.z, r1.w
mul r1.xyz, r1.wwww, cb1[4].xyzx
mul r1.xyz, r1.xyzx, l(1.442695, 1.442695, 1.442695, 0.000000)
exp r1.xyz, r1.xyzx
mad r2.xyz, v1.xyzx, l(2.007874, 2.007874, 2.007874, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r3.x, cb10[0].xyzx, r2.xyzx
dp3 r3.y, cb10[1].xyzx, r2.xyzx
dp3 r3.z, cb10[2].xyzx, r2.xyzx
dp3 o3.x, cb12[4].xyzx, r3.xyzx
dp3 o3.y, cb12[5].xyzx, r3.xyzx
dp3 o3.z, cb12[6].xyzx, r3.xyzx
add r2.xy, v3.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)
dp2 r0.w, r2.xyxx, r2.xyxx
rsq r1.w, r0.w
sqrt r0.w, r0.w
add o4.z, r0.w, r0.w
mul o4.xy, r1.wwww, r2.xyxx
mov o4.w, v3.z
mad r2.xyz, v2.xyzx, l(2.007874, 2.007874, 2.007874, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r3.x, cb10[0].xyzx, r2.xyzx
dp3 r3.y, cb10[1].xyzx, r2.xyzx
dp3 r3.z, cb10[2].xyzx, r2.xyzx
dp3 o5.x, cb12[4].xyzx, r3.xyzx
dp3 o5.y, cb12[5].xyzx, r3.xyzx
dp3 o5.z, cb12[6].xyzx, r3.xyzx
and r0.w, l(0x00008000), cb13[0].x
movc o6.xyz, r0.wwww, r1.xyzx, l(1.000000,1.000000,1.000000,0)
add r1.xyz, -r1.xyzx, cb1[7].wwww
dp3 r1.w, r0.xyzx, r0.xyzx
rsq r1.w, r1.w
mul r0.xyz, r0.xyzx, r1.wwww
dp3 r0.x, r0.xyzx, -cb3[6].xyzx
mad r0.y, r0.x, r0.x, cb1[7].w
mad r0.x, cb1[6].w, r0.x, cb1[5].w
rsq r0.x, r0.x
mul r0.z, r0.x, r0.x
mul r2.xyz, r0.zzzz, cb1[6].xyzx
mul r2.xyz, r0.xxxx, r2.xyzx
mad r0.xyz, cb1[5].xyzx, r0.yyyy, r2.xyzx
mul r0.xyz, r0.xyzx, cb1[7].xyzx
mul r0.xyz, r1.xyzx, r0.xyzx
movc o7.xyz, r0.wwww, r0.xyzx, l(0,0,0,0)
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
