//Sea water reflection and stuff.
// ---- Created with 3Dmigoto v1.3.11 on Sun Aug 05 15:16:00 2018
Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

TextureCube<float4> t4 : register(t4);

Texture2D<float4> t3 : register(t3);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s7_s : register(s7);

SamplerState s6_s : register(s6);

SamplerState s5_s : register(s5);

SamplerState s4_s : register(s4);

SamplerState s3_s : register(s3);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb9 : register(b9)
{
  float4 cb9[15];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float4 v1 : TEXCOORD1,
  float4 v2 : TEXCOORD2,
  float4 v3 : TEXCOORD3,
  float4 v4 : TEXCOORD4,
  float3 v5 : TEXCOORD5,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  //v1.x+=stereo.x*(v1.z-stereo.y)*0.5;
  r0.xy = v1.xy / v1.zz;
  
  r0.x = t7.Sample(s7_s, r0.xy).x;
  r0.x = cb9[8].x + r0.x;
  r0.x = -cb9[8].y / r0.x;
  r0.x = -v2.z + r0.x;
  r0.y = dot(v2.xyz, v2.xyz);
  r0.y = rsqrt(r0.y);
  r0.yzw = v2.xyz * r0.yyy;
  
  r0.x = r0.x / r0.w;
  r0.x = cb9[5].y * r0.x;
  r1.xyz = t6.Sample(s6_s, r0.xx).xyz;
  r0.x = dot(v5.xyz, v5.xyz);
  r0.x = rsqrt(r0.x);
  r2.xyz = v5.xyz * r0.xxx;
  r3.xyz = t0.Sample(s0_s, v0.xy).xyz;
  r3.xyz = float3(-0.5,-0.5,-0.5) + r3.xyz;
  r0.x = dot(r3.xyz, r3.xyz);
  r0.x = rsqrt(r0.x);
  r3.xyz = r3.xyz * r0.xxx;
  r0.x = dot(r2.xyz, r3.xyz);
  r0.x = r0.x + r0.x;
  r2.xyz = r3.xyz * -r0.xxx + r2.xyz;
  r2.w = abs(r2.y);
  r2.xyz = float3(-1,1,1) * r2.xwz;
  r2.xyzw = t4.Sample(s4_s, r2.xyz).xyzw;
  r0.x = 0.25 / r2.w;
  r2.xyz = r2.xyz * r0.xxx;
  r0.x = dot(r2.xyz, cb9[7].xyz);
  r0.x = cb9[7].w + r0.x;
  r2.xyz = r2.xyz * r0.xxx;
  r4.x = dot(cb9[1].xyz, r3.xyz);
  r4.y = dot(cb9[2].xyz, r3.xyz);
  r4.z = dot(cb9[3].xyz, r3.xyz);
  r0.x = dot(r0.yzw, r4.xyz);
  r0.y = -0.5 * r4.z;
  r4.xy = r0.yy * r4.xy;
  r0.x = -r0.x;
  r0.y = t6.Sample(s6_s, r0.xx).w;
  r0.yzw = r2.xyz * r0.yyy;
  r4.z = -r4.x;
  r2.xy = v1.xy + r4.zy;
  //r2.x+=stereo.x;
  r2.xy = r2.xy / v1.zz;
  r4.xy = float2(-0.0399999991,-0.959999979) + r2.yy;
  r4.xy = float2(-0.00039999999,-0.00039999999) / r4.xy;
  r1.w = -r4.x + r2.y;
  r2.yw = cmp(r2.yy >= float2(0.0199999996,0.980000019));
  r2.yw = r2.yw ? float2(1,1) : 0;
  r1.w = r2.y * r1.w + r4.x;
  r2.y = 1 + r4.y;
  r2.y = r2.y + -r1.w;
  r2.z = r2.w * r2.y + r1.w;
  r2.xyzw = t1.Sample(s1_s, r2.xz).xyzw;
  r1.w = 0.5 + r2.w;
  r2.xyz = r2.xyz * r1.www;
  r0.yzw = r2.xyz * r1.xyz + r0.yzw;
  r1.x = cb9[12].y + -cb9[12].x;
  r1.y = t3.Sample(s3_s, v0.xy).z;
  r1.x = r1.y * r1.x + cb9[12].x;
  r1.x = max(0, r1.x);
  r0.x = r1.x / r0.x;
  r1.xzw = t6.Sample(s6_s, r0.xx).xyz;
  r0.xyz = cb9[11].xyz * r1.xzw + r0.yzw;
  r0.w = dot(cb9[9].xyz, r3.xyz);
  r1.xzw = -cb9[9].xyz * r0.www + r3.xyz;
  r2.xyz = cb9[9].xyz + -r1.xzw;
  r0.w = t5.Sample(s5_s, v0.zw).w;
  r2.w = -v2.z * cb9[14].w + cb9[13].w;
  r2.w = max(0, r2.w);
  r0.w = r1.y * r0.w + -r2.w;
  r1.y = 1 + -r2.w;
  r1.y = 1 / r1.y;
  r1.y = r1.y * r0.w;
  r1.xyz = r1.yyy * r2.xyz + r1.xzw;
  r1.w = dot(r1.xyz, r1.xyz);
  r1.w = rsqrt(r1.w);
  r1.xyz = r1.xyz * r1.www;
  r1.x = dot(r1.xyz, cb9[10].xyz);
  r1.yzw = cb9[14].xyz + cb9[13].xyz;
  r2.xyz = float3(0.5,0.5,0.5) * r1.yzw;
  r1.yzw = -r1.yzw * float3(0.5,0.5,0.5) + cb9[14].xyz;
  r1.xyz = r1.xxx * r1.yzw + r2.xyz;
  r1.xyz = r1.xyz + -r0.xyz;
  r1.w = v2.z * cb9[14].w + cb9[13].w;
  r1.w = r1.w + -r2.w;
  r1.w = 1 / r1.w;
  r0.w = saturate(r1.w * r0.w);
  r1.w = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r1.w * r0.w;
  r0.xyz = r0.www * r1.xyz + r0.xyz;
  r1.xyz = r0.xyz * v3.xyz + v4.xyz;
  r0.w = 4 & asint(cb13[0].x);
  o0.xyz = r0.www ? r1.xyz : r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sun Aug 05 15:16:00 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// TEXCOORD                 2   xyzw        2     NONE   float   xyz
// TEXCOORD                 3   xyz         3     NONE   float   xyz
// TEXCOORD                 4   xyz         4     NONE   float   xyz
// TEXCOORD                 5   xyz         5     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb9[15], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s3, mode_default
dcl_sampler s4, mode_default
dcl_sampler s5, mode_default
dcl_sampler s6, mode_default
dcl_sampler s7, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t3
dcl_resource_texturecube (float,float,float,float) t4
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_input_ps linear v0.xyzw
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xyz
dcl_output o0.xyzw
dcl_temps 5
div r0.xy, v1.xyxx, v1.zzzz
sample_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t7.xyzw, s7
add r0.x, r0.x, cb9[8].x
div r0.x, -cb9[8].y, r0.x
add r0.x, r0.x, -v2.z
dp3 r0.y, v2.xyzx, v2.xyzx
rsq r0.y, r0.y
mul r0.yzw, r0.yyyy, v2.xxyz
div r0.x, r0.x, r0.w
mul r0.x, r0.x, cb9[5].y
sample_indexable(texture2d)(float,float,float,float) r1.xyz, r0.xxxx, t6.xyzw, s6
dp3 r0.x, v5.xyzx, v5.xyzx
rsq r0.x, r0.x
mul r2.xyz, r0.xxxx, v5.xyzx
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v0.xyxx, t0.xyzw, s0
add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
dp3 r0.x, r3.xyzx, r3.xyzx
rsq r0.x, r0.x
mul r3.xyz, r0.xxxx, r3.xyzx
dp3 r0.x, r2.xyzx, r3.xyzx
add r0.x, r0.x, r0.x
mad r2.xyz, r3.xyzx, -r0.xxxx, r2.xyzx
mov r2.w, |r2.y|
mul r2.xyz, r2.xwzx, l(-1.000000, 1.000000, 1.000000, 0.000000)
sample_indexable(texturecube)(float,float,float,float) r2.xyzw, r2.xyzx, t4.xyzw, s4
div r0.x, l(0.250000), r2.w
mul r2.xyz, r0.xxxx, r2.xyzx
dp3 r0.x, r2.xyzx, cb9[7].xyzx
add r0.x, r0.x, cb9[7].w
mul r2.xyz, r0.xxxx, r2.xyzx
dp3 r4.x, cb9[1].xyzx, r3.xyzx
dp3 r4.y, cb9[2].xyzx, r3.xyzx
dp3 r4.z, cb9[3].xyzx, r3.xyzx
dp3 r0.x, r0.yzwy, r4.xyzx
mul r0.y, r4.z, l(-0.500000)
mul r4.xy, r4.xyxx, r0.yyyy
mov r0.x, -r0.x
sample_indexable(texture2d)(float,float,float,float) r0.y, r0.xxxx, t6.xwyz, s6
mul r0.yzw, r0.yyyy, r2.xxyz
mov r4.z, -r4.x
add r2.xy, r4.zyzz, v1.xyxx
div r2.xy, r2.xyxx, v1.zzzz
add r4.xy, r2.yyyy, l(-0.040000, -0.960000, 0.000000, 0.000000)
div r4.xy, l(-0.000400, -0.000400, 0.000000, 0.000000), r4.xyxx
add r1.w, r2.y, -r4.x
ge r2.yw, r2.yyyy, l(0.000000, 0.020000, 0.000000, 0.980000)
and r2.yw, r2.yyyw, l(0, 0x3f800000, 0, 0x3f800000)
mad r1.w, r2.y, r1.w, r4.x
add r2.y, r4.y, l(1.000000)
add r2.y, -r1.w, r2.y
mad r2.z, r2.w, r2.y, r1.w
sample_indexable(texture2d)(float,float,float,float) r2.xyzw, r2.xzxx, t1.xyzw, s1
add r1.w, r2.w, l(0.500000)
mul r2.xyz, r1.wwww, r2.xyzx
mad r0.yzw, r2.xxyz, r1.xxyz, r0.yyzw
add r1.x, -cb9[12].x, cb9[12].y
sample_indexable(texture2d)(float,float,float,float) r1.y, v0.xyxx, t3.xzyw, s3
mad r1.x, r1.y, r1.x, cb9[12].x
max r1.x, r1.x, l(0.000000)
div r0.x, r1.x, r0.x
sample_indexable(texture2d)(float,float,float,float) r1.xzw, r0.xxxx, t6.xwyz, s6
mad r0.xyz, cb9[11].xyzx, r1.xzwx, r0.yzwy
dp3 r0.w, cb9[9].xyzx, r3.xyzx
mad r1.xzw, -cb9[9].xxyz, r0.wwww, r3.xxyz
add r2.xyz, -r1.xzwx, cb9[9].xyzx
sample_indexable(texture2d)(float,float,float,float) r0.w, v0.zwzz, t5.xyzw, s5
mad r2.w, -v2.z, cb9[14].w, cb9[13].w
max r2.w, r2.w, l(0.000000)
mad r0.w, r1.y, r0.w, -r2.w
add r1.y, -r2.w, l(1.000000)
div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), r1.y
mul r1.y, r0.w, r1.y
mad r1.xyz, r1.yyyy, r2.xyzx, r1.xzwx
dp3 r1.w, r1.xyzx, r1.xyzx
rsq r1.w, r1.w
mul r1.xyz, r1.wwww, r1.xyzx
dp3 r1.x, r1.xyzx, cb9[10].xyzx
add r1.yzw, cb9[13].xxyz, cb9[14].xxyz
mul r2.xyz, r1.yzwy, l(0.500000, 0.500000, 0.500000, 0.000000)
mad r1.yzw, -r1.yyzw, l(0.000000, 0.500000, 0.500000, 0.500000), cb9[14].xxyz
mad r1.xyz, r1.xxxx, r1.yzwy, r2.xyzx
add r1.xyz, -r0.xyzx, r1.xyzx
mad r1.w, v2.z, cb9[14].w, cb9[13].w
add r1.w, -r2.w, r1.w
div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), r1.w
mul_sat r0.w, r0.w, r1.w
mad r1.w, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.w
mad r0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mad r1.xyz, r0.xyzx, v3.xyzx, v4.xyzx
and r0.w, l(4), cb13[0].x
movc o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
