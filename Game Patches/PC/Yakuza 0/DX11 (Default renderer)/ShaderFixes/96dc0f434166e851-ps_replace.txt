//More cutscene shadows PS (bar).
// ---- Created with 3Dmigoto v1.3.11 on Sat Aug 04 14:00:45 2018
Texture2D<float4> t15 : register(t15);

Texture2D<float4> t14 : register(t14);

Texture2D<float4> t13 : register(t13);

Texture2D<float4> t12 : register(t12);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s15_s : register(s15);

SamplerComparisonState s14_s : register(s14);

SamplerComparisonState s13_s : register(s13);

SamplerComparisonState s12_s : register(s12);

SamplerState s0_s : register(s0);

cbuffer cb2 : register(b2)
{
  float4 cb2[29];
}

cbuffer cb1 : register(b1)
{
  float4 cb1[11];
}

cbuffer cb9 : register(b9)
{
  float4 cb9[1];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : TEXCOORD0,
  float3 v1 : TEXCOORD1,
  float4 v2 : SV_POSITION0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4,r5,r11;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  float4 iniparams1 = IniParams.Load(int2(1,0));
  
  r0.x = t0.Sample(s0_s, v0.xy).x;
  r0.x = cb2[0].x + r0.x;
  r0.x = -cb2[0].y / r0.x;
  r1.xyz = v1.xyz * -r0.xxx;
  r1.w = 1;
  
  float mult;
  mult=1;
  if (cb9[0].x!=0)
  {
	mult=cb9[0].x;
  }
  
  //FOV is 0.6125 at normal camera.
  r11.xyzw=r1.xyzw;
  float depth = dot(cb2[8].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  float fshadows;
  fshadows=iniparams1.x;
  
  r2.x = dot(cb2[5].xyzw, r11.xyzw);
  r2.y = dot(cb2[6].xyzw, r11.xyzw);
  r2.z = dot(cb2[7].xyzw, r11.xyzw);
  r0.y = dot(cb2[8].xyzw, r11.xyzw);
  r0.yzw = r2.xyz / r0.yyy;
  r2.x = cb1[10].w * 0.0009765625;
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r0.yzyz;
  r4.xyzw = saturate(r3.xyzw);
  r4.xyzw = cmp(r3.xyzw == r4.xyzw);
  r2.yz = r4.yw ? r4.xz : 0;
  r0.w = min(1, r0.w);
  r2.w = t15.SampleCmp(s15_s, r3.xy, r0.w).x;
  if (r2.y == 0) {
    r2.w = 1;
  }
  r4.x = r2.y ? r2.w : 1;
  r2.y = t15.SampleCmp(s15_s, r3.zw, r0.w).x;
  if (r2.z == 0) {
    r2.y = 1;
  }
  r4.y = r2.z ? r2.y : 1;
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r0.yzyz;
  r5.xyzw = saturate(r3.xyzw);
  r5.xyzw = cmp(r3.xyzw == r5.xyzw);
  r0.yz = r5.yw ? r5.xz : 0;
  r2.y = t15.SampleCmp(s15_s, r3.xy, r0.w).x;
  if (r0.y == 0) {
    r2.y = 1;
  }
  r4.z = r0.y ? r2.y : 1;
  r0.y = t15.SampleCmp(s15_s, r3.zw, r0.w).x;
  if (r0.z == 0) {
    r0.y = 1;
  }
  r4.w = r0.z ? r0.y : 1;
  r0.y = dot(r4.xyzw, float4(0.25,0.25,0.25,0.25));
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[4].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r3.x = dot(cb2[1].xyzw, r11.xyzw);
  r3.y = dot(cb2[2].xyzw, r11.xyzw);
  r3.z = dot(cb2[3].xyzw, r11.xyzw);
  r0.z = dot(cb2[4].xyzw, r11.xyzw);
  r2.yzw = r3.xyz / r0.zzz;
  r3.xyzw = cb1[10].wwww * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r2.yzyz;
  r4.xyzw = saturate(r3.xyzw);
  r4.xyzw = cmp(r3.xyzw == r4.xyzw);
  r0.zw = r4.yw ? r4.xz : 0;
  r2.w = min(1, r2.w);
  r3.x = t14.SampleCmp(s14_s, r3.xy, r2.w).x;
  if (r0.z == 0) {
    r3.x = 1;
  }
  r4.x = r0.z ? r3.x : 1;
  r0.z = t14.SampleCmp(s14_s, r3.zw, r2.w).x;
  if (r0.w == 0) {
    r0.z = 1;
  }
  r4.y = r0.w ? r0.z : 1;
  r3.xyzw = cb1[10].wwww * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r2.yzyz;
  r5.xyzw = saturate(r3.xyzw);
  r5.xyzw = cmp(r3.xyzw == r5.xyzw);
  r0.zw = r5.yw ? r5.xz : 0;
  r2.y = t14.SampleCmp(s14_s, r3.xy, r2.w).x;
  if (r0.z == 0) {
    r2.y = 1;
  }
  r4.z = r0.z ? r2.y : 1;
  r0.z = t14.SampleCmp(s14_s, r3.zw, r2.w).x;
  if (r0.w == 0) {
    r0.z = 1;
  }
  r4.w = r0.w ? r0.z : 1;
  r0.z = dot(r4.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.y = r0.y * r0.z;
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[12].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r3.x = dot(cb2[9].xyzw, r11.xyzw);
  r3.y = dot(cb2[10].xyzw, r11.xyzw);
  r3.z = dot(cb2[11].xyzw, r11.xyzw);
  r0.z = dot(cb2[12].xyzw, r11.xyzw);
  r2.yzw = r3.xyz / r0.zzz;
  r0.zw = float2(-0.5,-0.5) + v2.xy;
  r0.zw = float2(0.5,0.5) * r0.zw;
  r0.zw = frac(r0.zw);
  r0.zw = cmp(float2(0.25,0.25) < r0.zw);
  r3.xy = r0.zw ? float2(1,1) : 0;
  r0.z = r3.y + r3.x;
  r0.w = cmp(1.10000002 < r0.z);
  r3.z = r0.w ? 0 : r0.z;
  r0.zw = float2(-0.5,-0.5) + r3.xz;
  r0.zw = r2.xx * r0.zw + r2.yz;
  r2.xy = saturate(r0.zw);
  r2.xy = cmp(r0.zw == r2.xy);
  r2.x = r2.y ? r2.x : 0;
  r2.y = min(1, r2.w);
  r0.z = t13.SampleCmp(s13_s, r0.zw, r2.y).x;
  if (r2.x == 0) {
    r0.z = 1;
  }
  r0.y = r0.y * r0.z;
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[12].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r2.x = dot(cb2[13].xyzw, r11.xyzw);
  r2.y = dot(cb2[14].xyzw, r11.xyzw);
  r2.z = dot(cb2[15].xyzw, r11.xyzw);
  r0.z = dot(cb2[16].xyzw, r11.xyzw);
  r2.x+=stereo.x*(r0.z-stereo.y)*0.5;
  r2.xyz = r2.xyz / r0.zzz;
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r2.xyxy;
  r4.xyzw = saturate(r3.xyzw);
  r4.xyzw = cmp(r3.xyzw == r4.xyzw);
  r0.zw = r4.yw ? r4.xz : 0;
  r3.xyzw = float4(0.5,0.5,0.5,0.5) * r3.xyzw;
  r2.z = min(1, r2.z);
  r4.x = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r5.xy = saturate(r3.xy);
    r3.xy = cmp(r3.xy == r5.xy);
    r0.z = r3.y ? r3.x : 0;
    if (r0.z == 0) {
      r4.x = 1;
    }
  } else {
    r4.x = 1;
  }
  r4.y = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.y = 1;
    }
  } else {
    r4.y = 1;
  }
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r2.xyxy;
  r5.xyzw = saturate(r3.xyzw);
  r5.xyzw = cmp(r3.xyzw == r5.xyzw);
  r0.zw = r5.yw ? r5.xz : 0;
  r3.xyzw = float4(0.5,0.5,0.5,0.5) * r3.xyzw;
  r4.z = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r2.xy = saturate(r3.xy);
    r2.xy = cmp(r3.xy == r2.xy);
    r0.z = r2.y ? r2.x : 0;
    if (r0.z == 0) {
      r4.z = 1;
    }
  } else {
    r4.z = 1;
  }
  r4.w = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.w = 1;
    }
  } else {
    r4.w = 1;
  }
  r0.z = dot(r4.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.y = r0.y * r0.z;
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[12].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r2.x = dot(cb2[17].xyzw, r11.xyzw);
  r2.y = dot(cb2[18].xyzw, r11.xyzw);
  r2.z = dot(cb2[19].xyzw, r11.xyzw);
  r0.z = dot(cb2[20].xyzw, r11.xyzw);
  r2.x+=stereo.x*(r0.z-stereo.y)*0.5;
  r2.xyz = r2.xyz / r0.zzz;
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r2.xyxy;
  r4.xyzw = saturate(r3.xyzw);
  r4.xyzw = cmp(r3.xyzw == r4.xyzw);
  r0.zw = r4.yw ? r4.xz : 0;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0,0.5,0);
  r2.z = min(1, r2.z);
  r4.x = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r5.xy = saturate(r3.xy);
    r3.xy = cmp(r3.xy == r5.xy);
    r0.z = r3.y ? r3.x : 0;
    if (r0.z == 0) {
      r4.x = 1;
    }
  } else {
    r4.x = 1;
  }
  r4.y = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.y = 1;
    }
  } else {
    r4.y = 1;
  }
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r2.xyxy;
  r5.xyzw = saturate(r3.xyzw);
  r5.xyzw = cmp(r3.xyzw == r5.xyzw);
  r0.zw = r5.yw ? r5.xz : 0;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0,0.5,0);
  r4.z = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r2.xy = saturate(r3.xy);
    r2.xy = cmp(r3.xy == r2.xy);
    r0.z = r2.y ? r2.x : 0;
    if (r0.z == 0) {
      r4.z = 1;
    }
  } else {
    r4.z = 1;
  }
  r4.w = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.w = 1;
    }
  } else {
    r4.w = 1;
  }
  r0.z = dot(r4.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.y = r0.y * r0.z;
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[24].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r2.x = dot(cb2[21].xyzw, r11.xyzw);
  r2.y = dot(cb2[22].xyzw, r11.xyzw);
  r2.z = dot(cb2[23].xyzw, r11.xyzw);
  r0.z = dot(cb2[24].xyzw, r11.xyzw);
  r2.x+=stereo.x*(r0.z-stereo.y)*0.5;
  r2.xyz = r2.xyz / r0.zzz;
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r2.xyxy;
  r4.xyzw = saturate(r3.xyzw);
  r4.xyzw = cmp(r3.xyzw == r4.xyzw);
  r0.zw = r4.yw ? r4.xz : 0;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0,0.5,0,0.5);
  r2.z = min(1, r2.z);
  r4.x = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r5.xy = saturate(r3.xy);
    r3.xy = cmp(r3.xy == r5.xy);
    r0.z = r3.y ? r3.x : 0;
    if (r0.z == 0) {
      r4.x = 1;
    }
  } else {
    r4.x = 1;
  }
  r4.y = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.y = 1;
    }
  } else {
    r4.y = 1;
  }
  r3.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r2.xyxy;
  r5.xyzw = saturate(r3.xyzw);
  r5.xyzw = cmp(r3.xyzw == r5.xyzw);
  r0.zw = r5.yw ? r5.xz : 0;
  r3.xyzw = r3.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0,0.5,0,0.5);
  r4.z = t12.SampleCmp(s12_s, r3.xy, r2.z).x;
  if (r0.z != 0) {
    r2.xy = saturate(r3.xy);
    r2.xy = cmp(r3.xy == r2.xy);
    r0.z = r2.y ? r2.x : 0;
    if (r0.z == 0) {
      r4.z = 1;
    }
  } else {
    r4.z = 1;
  }
  r4.w = t12.SampleCmp(s12_s, r3.zw, r2.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r3.zw);
    r0.zw = cmp(r3.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r4.w = 1;
    }
  } else {
    r4.w = 1;
  }
  r0.z = dot(r4.xyzw, float4(0.25,0.25,0.25,0.25));
  r0.y = r0.y * r0.z;
  
  r11.xyzw=r1.xyzw;
  depth = dot(cb2[28].xyzw, r11.xyzw);
  r11.x+=stereo.x*(1*stereo.y+r11.z)*mult;
  
  r2.x = dot(cb2[25].xyzw, r11.xyzw);
  r2.y = dot(cb2[26].xyzw, r11.xyzw);
  r2.z = dot(cb2[27].xyzw, r11.xyzw);
  r0.z = dot(cb2[28].xyzw, r11.xyzw);
  r2.x+=stereo.x*(r0.z-stereo.y)*0.5;
  r1.xyz = r2.xyz / r0.zzz;
  r2.xyzw = cb1[10].zzzz * float4(-0.00048828125,-0.00048828125,0.00048828125,-0.00048828125) + r1.xyxy;
  r3.xyzw = saturate(r2.xyzw);
  r3.xyzw = cmp(r2.xyzw == r3.xyzw);
  r0.zw = r3.yw ? r3.xz : 0;
  r2.xyzw = r2.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r1.z = min(1, r1.z);
  r3.x = t12.SampleCmp(s12_s, r2.xy, r1.z).x;
  if (r0.z != 0) {
    r4.xy = saturate(r2.xy);
    r2.xy = cmp(r2.xy == r4.xy);
    r0.z = r2.y ? r2.x : 0;
    if (r0.z == 0) {
      r3.x = 1;
    }
  } else {
    r3.x = 1;
  }
  r3.y = t12.SampleCmp(s12_s, r2.zw, r1.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r2.zw);
    r0.zw = cmp(r2.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r3.y = 1;
    }
  } else {
    r3.y = 1;
  }
  r2.xyzw = cb1[10].zzzz * float4(-0.00048828125,0.00048828125,0.00048828125,0.00048828125) + r1.xyxy;
  r4.xyzw = saturate(r2.xyzw);
  r4.xyzw = cmp(r2.xyzw == r4.xyzw);
  r0.zw = r4.yw ? r4.xz : 0;
  r2.xyzw = r2.xyzw * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
  r3.z = t12.SampleCmp(s12_s, r2.xy, r1.z).x;
  if (r0.z != 0) {
    r1.xy = saturate(r2.xy);
    r1.xy = cmp(r2.xy == r1.xy);
    r0.z = r1.y ? r1.x : 0;
    if (r0.z == 0) {
      r3.z = 1;
    }
  } else {
    r3.z = 1;
  }
  r3.w = t12.SampleCmp(s12_s, r2.zw, r1.z).x;
  if (r0.w != 0) {
    r0.zw = saturate(r2.zw);
    r0.zw = cmp(r2.zw == r0.zw);
    r0.z = r0.w ? r0.z : 0;
    if (r0.z == 0) {
      r3.w = 1;
    }
  } else {
    r3.w = 1;
  }
  r0.z = dot(r3.xyzw, float4(0.25,0.25,0.25,0.25));
  r1.y = r0.y * r0.z;
  r0.y = 8 & asint(cb13[0].x);
  r1.xw = float2(1,1);
  o0.xyw = r0.yyy ? r1.xyw : r1.yww;
  r0.x = saturate(-r0.x * -0.015625 + 1);
  o0.z = r0.x * r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.11 on Sat Aug 04 14:00:45 2018
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy
// TEXCOORD                 1   xyz         1     NONE   float   xyz
// SV_POSITION              0   xyzw        2      POS   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb13[1], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_constantbuffer cb2[29], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s12, mode_comparison
dcl_sampler s13, mode_comparison
dcl_sampler s14, mode_comparison
dcl_sampler s15, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t12
dcl_resource_texture2d (float,float,float,float) t13
dcl_resource_texture2d (float,float,float,float) t14
dcl_resource_texture2d (float,float,float,float) t15
dcl_input_ps linear v0.xy
dcl_input_ps linear v1.xyz
dcl_input_ps_siv linear noperspective v2.xy, position
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.x, v0.xyxx, t0.xyzw, s0
add r0.x, r0.x, cb2[0].x
div r0.x, -cb2[0].y, r0.x
mul r1.xyz, -r0.xxxx, v1.xyzx
mov r1.w, l(1.000000)
dp4 r2.x, cb2[5].xyzw, r1.xyzw
dp4 r2.y, cb2[6].xyzw, r1.xyzw
dp4 r2.z, cb2[7].xyzw, r1.xyzw
dp4 r0.y, cb2[8].xyzw, r1.xyzw
div r0.yzw, r2.xxyz, r0.yyyy
mul r2.x, l(0.000976562500), cb1[10].w
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r0.yzyz
mov_sat r4.xyzw, r3.xyzw
eq r4.xyzw, r3.xyzw, r4.xyzw
and r2.yz, r4.yywy, r4.xxzx
min r0.w, r0.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r2.w, r3.xyxx, t15.xxxx, s15, r0.w
if_z r2.y
  mov r2.w, l(1.000000)
endif
movc r4.x, r2.y, r2.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r2.y, r3.zwzz, t15.xxxx, s15, r0.w
if_z r2.z
  mov r2.y, l(1.000000)
endif
movc r4.y, r2.z, r2.y, l(1.000000)
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r0.yzyz
mov_sat r5.xyzw, r3.xyzw
eq r5.xyzw, r3.xyzw, r5.xyzw
and r0.yz, r5.yywy, r5.xxzx
sample_c_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t15.xxxx, s15, r0.w
if_z r0.y
  mov r2.y, l(1.000000)
endif
movc r4.z, r0.y, r2.y, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.y, r3.zwzz, t15.xxxx, s15, r0.w
if_z r0.z
  mov r0.y, l(1.000000)
endif
movc r4.w, r0.z, r0.y, l(1.000000)
dp4 r0.y, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
dp4 r3.x, cb2[1].xyzw, r1.xyzw
dp4 r3.y, cb2[2].xyzw, r1.xyzw
dp4 r3.z, cb2[3].xyzw, r1.xyzw
dp4 r0.z, cb2[4].xyzw, r1.xyzw
div r2.yzw, r3.xxyz, r0.zzzz
mad r3.xyzw, cb1[10].wwww, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r2.yzyz
mov_sat r4.xyzw, r3.xyzw
eq r4.xyzw, r3.xyzw, r4.xyzw
and r0.zw, r4.yyyw, r4.xxxz
min r2.w, r2.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r3.xyxx, t14.xxxx, s14, r2.w
if_z r0.z
  mov r3.x, l(1.000000)
endif
movc r4.x, r0.z, r3.x, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.z, r3.zwzz, t14.xxxx, s14, r2.w
if_z r0.w
  mov r0.z, l(1.000000)
endif
movc r4.y, r0.w, r0.z, l(1.000000)
mad r3.xyzw, cb1[10].wwww, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r2.yzyz
mov_sat r5.xyzw, r3.xyzw
eq r5.xyzw, r3.xyzw, r5.xyzw
and r0.zw, r5.yyyw, r5.xxxz
sample_c_indexable(texture2d)(float,float,float,float) r2.y, r3.xyxx, t14.xxxx, s14, r2.w
if_z r0.z
  mov r2.y, l(1.000000)
endif
movc r4.z, r0.z, r2.y, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.z, r3.zwzz, t14.xxxx, s14, r2.w
if_z r0.w
  mov r0.z, l(1.000000)
endif
movc r4.w, r0.w, r0.z, l(1.000000)
dp4 r0.z, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.y, r0.z, r0.y
dp4 r3.x, cb2[9].xyzw, r1.xyzw
dp4 r3.y, cb2[10].xyzw, r1.xyzw
dp4 r3.z, cb2[11].xyzw, r1.xyzw
dp4 r0.z, cb2[12].xyzw, r1.xyzw
div r2.yzw, r3.xxyz, r0.zzzz
add r0.zw, v2.xxxy, l(0.000000, 0.000000, -0.500000, -0.500000)
mul r0.zw, r0.zzzw, l(0.000000, 0.000000, 0.500000, 0.500000)
frc r0.zw, r0.zzzw
lt r0.zw, l(0.000000, 0.000000, 0.250000, 0.250000), r0.zzzw
and r3.xy, r0.zwzz, l(0x3f800000, 0x3f800000, 0, 0)
add r0.z, r3.x, r3.y
lt r0.w, l(1.100000), r0.z
movc r3.z, r0.w, l(0), r0.z
add r0.zw, r3.xxxz, l(0.000000, 0.000000, -0.500000, -0.500000)
mad r0.zw, r2.xxxx, r0.zzzw, r2.yyyz
mov_sat r2.xy, r0.zwzz
eq r2.xy, r0.zwzz, r2.xyxx
and r2.x, r2.y, r2.x
min r2.y, r2.w, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r0.z, r0.zwzz, t13.xxxx, s13, r2.y
if_z r2.x
  mov r0.z, l(1.000000)
endif
mul r0.y, r0.z, r0.y
dp4 r2.x, cb2[13].xyzw, r1.xyzw
dp4 r2.y, cb2[14].xyzw, r1.xyzw
dp4 r2.z, cb2[15].xyzw, r1.xyzw
dp4 r0.z, cb2[16].xyzw, r1.xyzw
div r2.xyz, r2.xyzx, r0.zzzz
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r2.xyxy
mov_sat r4.xyzw, r3.xyzw
eq r4.xyzw, r3.xyzw, r4.xyzw
and r0.zw, r4.yyyw, r4.xxxz
mul r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
min r2.z, r2.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r4.x, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r5.xy, r3.xyxx
  eq r3.xy, r3.xyxx, r5.xyxx
  and r0.z, r3.y, r3.x
  if_z r0.z
    mov r4.x, l(1.000000)
  endif
else
  mov r4.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.y, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.y, l(1.000000)
  endif
else
  mov r4.y, l(1.000000)
endif
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r2.xyxy
mov_sat r5.xyzw, r3.xyzw
eq r5.xyzw, r3.xyzw, r5.xyzw
and r0.zw, r5.yyyw, r5.xxxz
mul r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r4.z, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r2.xy, r3.xyxx
  eq r2.xy, r3.xyxx, r2.xyxx
  and r0.z, r2.y, r2.x
  if_z r0.z
    mov r4.z, l(1.000000)
  endif
else
  mov r4.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.w, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.w, l(1.000000)
  endif
else
  mov r4.w, l(1.000000)
endif
dp4 r0.z, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.y, r0.z, r0.y
dp4 r2.x, cb2[17].xyzw, r1.xyzw
dp4 r2.y, cb2[18].xyzw, r1.xyzw
dp4 r2.z, cb2[19].xyzw, r1.xyzw
dp4 r0.z, cb2[20].xyzw, r1.xyzw
div r2.xyz, r2.xyzx, r0.zzzz
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r2.xyxy
mov_sat r4.xyzw, r3.xyzw
eq r4.xyzw, r3.xyzw, r4.xyzw
and r0.zw, r4.yyyw, r4.xxxz
mad r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.000000, 0.500000, 0.000000)
min r2.z, r2.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r4.x, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r5.xy, r3.xyxx
  eq r3.xy, r3.xyxx, r5.xyxx
  and r0.z, r3.y, r3.x
  if_z r0.z
    mov r4.x, l(1.000000)
  endif
else
  mov r4.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.y, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.y, l(1.000000)
  endif
else
  mov r4.y, l(1.000000)
endif
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r2.xyxy
mov_sat r5.xyzw, r3.xyzw
eq r5.xyzw, r3.xyzw, r5.xyzw
and r0.zw, r5.yyyw, r5.xxxz
mad r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.000000, 0.500000, 0.000000)
sample_c_indexable(texture2d)(float,float,float,float) r4.z, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r2.xy, r3.xyxx
  eq r2.xy, r3.xyxx, r2.xyxx
  and r0.z, r2.y, r2.x
  if_z r0.z
    mov r4.z, l(1.000000)
  endif
else
  mov r4.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.w, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.w, l(1.000000)
  endif
else
  mov r4.w, l(1.000000)
endif
dp4 r0.z, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.y, r0.z, r0.y
dp4 r2.x, cb2[21].xyzw, r1.xyzw
dp4 r2.y, cb2[22].xyzw, r1.xyzw
dp4 r2.z, cb2[23].xyzw, r1.xyzw
dp4 r0.z, cb2[24].xyzw, r1.xyzw
div r2.xyz, r2.xyzx, r0.zzzz
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r2.xyxy
mov_sat r4.xyzw, r3.xyzw
eq r4.xyzw, r3.xyzw, r4.xyzw
and r0.zw, r4.yyyw, r4.xxxz
mad r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
min r2.z, r2.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r4.x, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r5.xy, r3.xyxx
  eq r3.xy, r3.xyxx, r5.xyxx
  and r0.z, r3.y, r3.x
  if_z r0.z
    mov r4.x, l(1.000000)
  endif
else
  mov r4.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.y, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.y, l(1.000000)
  endif
else
  mov r4.y, l(1.000000)
endif
mad r3.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r2.xyxy
mov_sat r5.xyzw, r3.xyzw
eq r5.xyzw, r3.xyzw, r5.xyzw
and r0.zw, r5.yyyw, r5.xxxz
mad r3.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.000000, 0.500000, 0.000000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r4.z, r3.xyxx, t12.xxxx, s12, r2.z
if_nz r0.z
  mov_sat r2.xy, r3.xyxx
  eq r2.xy, r3.xyxx, r2.xyxx
  and r0.z, r2.y, r2.x
  if_z r0.z
    mov r4.z, l(1.000000)
  endif
else
  mov r4.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r4.w, r3.zwzz, t12.xxxx, s12, r2.z
if_nz r0.w
  mov_sat r0.zw, r3.zzzw
  eq r0.zw, r3.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r4.w, l(1.000000)
  endif
else
  mov r4.w, l(1.000000)
endif
dp4 r0.z, r4.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r0.y, r0.z, r0.y
dp4 r2.x, cb2[25].xyzw, r1.xyzw
dp4 r2.y, cb2[26].xyzw, r1.xyzw
dp4 r2.z, cb2[27].xyzw, r1.xyzw
dp4 r0.z, cb2[28].xyzw, r1.xyzw
div r1.xyz, r2.xyzx, r0.zzzz
mad r2.xyzw, cb1[10].zzzz, l(-0.000488281250, -0.000488281250, 0.000488281250, -0.000488281250), r1.xyxy
mov_sat r3.xyzw, r2.xyzw
eq r3.xyzw, r2.xyzw, r3.xyzw
and r0.zw, r3.yyyw, r3.xxxz
mad r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
min r1.z, r1.z, l(1.000000)
sample_c_indexable(texture2d)(float,float,float,float) r3.x, r2.xyxx, t12.xxxx, s12, r1.z
if_nz r0.z
  mov_sat r4.xy, r2.xyxx
  eq r2.xy, r2.xyxx, r4.xyxx
  and r0.z, r2.y, r2.x
  if_z r0.z
    mov r3.x, l(1.000000)
  endif
else
  mov r3.x, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.y, r2.zwzz, t12.xxxx, s12, r1.z
if_nz r0.w
  mov_sat r0.zw, r2.zzzw
  eq r0.zw, r2.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r3.y, l(1.000000)
  endif
else
  mov r3.y, l(1.000000)
endif
mad r2.xyzw, cb1[10].zzzz, l(-0.000488281250, 0.000488281250, 0.000488281250, 0.000488281250), r1.xyxy
mov_sat r4.xyzw, r2.xyzw
eq r4.xyzw, r2.xyzw, r4.xyzw
and r0.zw, r4.yyyw, r4.xxxz
mad r2.xyzw, r2.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
sample_c_indexable(texture2d)(float,float,float,float) r3.z, r2.xyxx, t12.xxxx, s12, r1.z
if_nz r0.z
  mov_sat r1.xy, r2.xyxx
  eq r1.xy, r2.xyxx, r1.xyxx
  and r0.z, r1.y, r1.x
  if_z r0.z
    mov r3.z, l(1.000000)
  endif
else
  mov r3.z, l(1.000000)
endif
sample_c_indexable(texture2d)(float,float,float,float) r3.w, r2.zwzz, t12.xxxx, s12, r1.z
if_nz r0.w
  mov_sat r0.zw, r2.zzzw
  eq r0.zw, r2.zzzw, r0.zzzw
  and r0.z, r0.w, r0.z
  if_z r0.z
    mov r3.w, l(1.000000)
  endif
else
  mov r3.w, l(1.000000)
endif
dp4 r0.z, r3.xyzw, l(0.250000, 0.250000, 0.250000, 0.250000)
mul r1.y, r0.z, r0.y
and r0.y, l(8), cb13[0].x
mov r1.xw, l(1.000000,0,0,1.000000)
movc o0.xyw, r0.yyyy, r1.xyxw, r1.ywyw
mad_sat r0.x, -r0.x, l(-0.015625), l(1.000000)
mul o0.z, r0.x, r0.x
ret
// Approximately 0 instruction slots used

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
